
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Engine
{
     public partial class DockerEngineUpdateTask : ExternalProcessTaskBase<int, DockerEngineUpdateTask>
     {
        
        
        public DockerEngineUpdateTask()
        {
            ExecutablePath = "docker";
            WithArguments("engine update");

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// override default location of containerd endpoint
        /// </summary>
        [ArgKey("--containerd")]
        public DockerEngineUpdateTask Containerd(string containerd)
        {
            WithArgumentsKeyFromAttribute(containerd.ToString());
            return this;
        }

        /// <summary>
        /// Specify engine image (default uses the same image as currently running)

        /// </summary>
        [ArgKey("--engine-image")]
        public DockerEngineUpdateTask EngineImage(string engineImage)
        {
            WithArgumentsKeyFromAttribute(engineImage.ToString());
            return this;
        }

        /// <summary>
        /// Override the current location where engine images are pulled
        /// </summary>
        [ArgKey("--registry-prefix")]
        public DockerEngineUpdateTask RegistryPrefix(string registryPrefix)
        {
            WithArgumentsKeyFromAttribute(registryPrefix.ToString());
            return this;
        }

        /// <summary>
        /// Specify engine version
        /// </summary>
        [ArgKey("--version")]
        public DockerEngineUpdateTask Version(string version)
        {
            WithArgumentsKeyFromAttribute(version.ToString());
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
            
            return base.DoExecute(context);
        }

     }
}
