
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker
{
     public partial class DockerCreateTask : ExternalProcessTaskBase<int, DockerCreateTask>
     {
        private string _image;
private string _command;
private string[] _arg;

        
        public DockerCreateTask(string image,  string command,  params string[] arg)
        {
            ExecutablePath = "docker";
            WithArgumentsKeyFromAttribute();
_image = image;
_command = command;
_arg = arg;

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Add a custom host-to-IP mapping (host:ip)
        /// </summary>
        [ArgKey("add-host")]
        public DockerCreateTask AddHost(string addHost)
        {
            WithArgumentsKeyFromAttribute(addHost.ToString());
            return this;
        }

        /// <summary>
        /// Attach to STDIN, STDOUT or STDERR
        /// </summary>
        [ArgKey("attach")]
        public DockerCreateTask Attach(string attach)
        {
            WithArgumentsKeyFromAttribute(attach.ToString());
            return this;
        }

        /// <summary>
        /// Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)

        /// </summary>
        [ArgKey("blkio-weight")]
        public DockerCreateTask BlkioWeight(string blkioWeight)
        {
            WithArgumentsKeyFromAttribute(blkioWeight.ToString());
            return this;
        }

        /// <summary>
        /// Block IO weight (relative device weight)
        /// </summary>
        [ArgKey("blkio-weight-device")]
        public DockerCreateTask BlkioWeightDevice(string blkioWeightDevice)
        {
            WithArgumentsKeyFromAttribute(blkioWeightDevice.ToString());
            return this;
        }

        /// <summary>
        /// Add Linux capabilities
        /// </summary>
        [ArgKey("cap-add")]
        public DockerCreateTask CapAdd(string capAdd)
        {
            WithArgumentsKeyFromAttribute(capAdd.ToString());
            return this;
        }

        /// <summary>
        /// Drop Linux capabilities
        /// </summary>
        [ArgKey("cap-drop")]
        public DockerCreateTask CapDrop(string capDrop)
        {
            WithArgumentsKeyFromAttribute(capDrop.ToString());
            return this;
        }

        /// <summary>
        /// Optional parent cgroup for the container
        /// </summary>
        [ArgKey("cgroup-parent")]
        public DockerCreateTask CgroupParent(string cgroupParent)
        {
            WithArgumentsKeyFromAttribute(cgroupParent.ToString());
            return this;
        }

        /// <summary>
        /// Write the container ID to the file
        /// </summary>
        [ArgKey("cidfile")]
        public DockerCreateTask Cidfile(string cidfile)
        {
            WithArgumentsKeyFromAttribute(cidfile.ToString());
            return this;
        }

        /// <summary>
        /// CPU count (Windows only)
        /// </summary>
        [ArgKey("cpu-count")]
        public DockerCreateTask CpuCount(long cpuCount)
        {
            WithArgumentsKeyFromAttribute(cpuCount.ToString());
            return this;
        }

        /// <summary>
        /// CPU percent (Windows only)
        /// </summary>
        [ArgKey("cpu-percent")]
        public DockerCreateTask CpuPercent(long cpuPercent)
        {
            WithArgumentsKeyFromAttribute(cpuPercent.ToString());
            return this;
        }

        /// <summary>
        /// Limit CPU CFS (Completely Fair Scheduler) period
        /// </summary>
        [ArgKey("cpu-period")]
        public DockerCreateTask CpuPeriod(long cpuPeriod)
        {
            WithArgumentsKeyFromAttribute(cpuPeriod.ToString());
            return this;
        }

        /// <summary>
        /// Limit CPU CFS (Completely Fair Scheduler) quota
        /// </summary>
        [ArgKey("cpu-quota")]
        public DockerCreateTask CpuQuota(long cpuQuota)
        {
            WithArgumentsKeyFromAttribute(cpuQuota.ToString());
            return this;
        }

        /// <summary>
        /// Limit CPU real-time period in microseconds
        /// </summary>
        [ArgKey("cpu-rt-period")]
        public DockerCreateTask CpuRtPeriod(long cpuRtPeriod)
        {
            WithArgumentsKeyFromAttribute(cpuRtPeriod.ToString());
            return this;
        }

        /// <summary>
        /// Limit CPU real-time runtime in microseconds
        /// </summary>
        [ArgKey("cpu-rt-runtime")]
        public DockerCreateTask CpuRtRuntime(long cpuRtRuntime)
        {
            WithArgumentsKeyFromAttribute(cpuRtRuntime.ToString());
            return this;
        }

        /// <summary>
        /// CPU shares (relative weight)
        /// </summary>
        [ArgKey("cpu-shares")]
        public DockerCreateTask CpuShares(long cpuShares)
        {
            WithArgumentsKeyFromAttribute(cpuShares.ToString());
            return this;
        }

        /// <summary>
        /// Number of CPUs
        /// </summary>
        [ArgKey("cpus")]
        public DockerCreateTask Cpus(decimal cpus)
        {
            WithArgumentsKeyFromAttribute(cpus.ToString());
            return this;
        }

        /// <summary>
        /// CPUs in which to allow execution (0-3, 0,1)
        /// </summary>
        [ArgKey("cpuset-cpus")]
        public DockerCreateTask CpusetCpus(string cpusetCpus)
        {
            WithArgumentsKeyFromAttribute(cpusetCpus.ToString());
            return this;
        }

        /// <summary>
        /// MEMs in which to allow execution (0-3, 0,1)
        /// </summary>
        [ArgKey("cpuset-mems")]
        public DockerCreateTask CpusetMems(string cpusetMems)
        {
            WithArgumentsKeyFromAttribute(cpusetMems.ToString());
            return this;
        }

        /// <summary>
        /// Add a host device to the container
        /// </summary>
        [ArgKey("device")]
        public DockerCreateTask Device(string device)
        {
            WithArgumentsKeyFromAttribute(device.ToString());
            return this;
        }

        /// <summary>
        /// Add a rule to the cgroup allowed devices list
        /// </summary>
        [ArgKey("device-cgroup-rule")]
        public DockerCreateTask DeviceCgroupRule(string deviceCgroupRule)
        {
            WithArgumentsKeyFromAttribute(deviceCgroupRule.ToString());
            return this;
        }

        /// <summary>
        /// Limit read rate (bytes per second) from a device
        /// </summary>
        [ArgKey("device-read-bps")]
        public DockerCreateTask DeviceReadBps(string deviceReadBps)
        {
            WithArgumentsKeyFromAttribute(deviceReadBps.ToString());
            return this;
        }

        /// <summary>
        /// Limit read rate (IO per second) from a device
        /// </summary>
        [ArgKey("device-read-iops")]
        public DockerCreateTask DeviceReadIops(string deviceReadIops)
        {
            WithArgumentsKeyFromAttribute(deviceReadIops.ToString());
            return this;
        }

        /// <summary>
        /// Limit write rate (bytes per second) to a device
        /// </summary>
        [ArgKey("device-write-bps")]
        public DockerCreateTask DeviceWriteBps(string deviceWriteBps)
        {
            WithArgumentsKeyFromAttribute(deviceWriteBps.ToString());
            return this;
        }

        /// <summary>
        /// Limit write rate (IO per second) to a device
        /// </summary>
        [ArgKey("device-write-iops")]
        public DockerCreateTask DeviceWriteIops(string deviceWriteIops)
        {
            WithArgumentsKeyFromAttribute(deviceWriteIops.ToString());
            return this;
        }

        /// <summary>
        /// Skip image verification
        /// </summary>
        [ArgKey("disable-content-trust")]
        public DockerCreateTask DisableContentTrust()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Set custom DNS servers
        /// </summary>
        [ArgKey("dns")]
        public DockerCreateTask Dns(string dns)
        {
            WithArgumentsKeyFromAttribute(dns.ToString());
            return this;
        }

        /// <summary>
        /// Set DNS options
        /// </summary>
        [ArgKey("dns-opt")]
        public DockerCreateTask DnsOpt(string dnsOpt)
        {
            WithArgumentsKeyFromAttribute(dnsOpt.ToString());
            return this;
        }

        /// <summary>
        /// Set DNS options
        /// </summary>
        [ArgKey("dns-option")]
        public DockerCreateTask DnsOption(string dnsOption)
        {
            WithArgumentsKeyFromAttribute(dnsOption.ToString());
            return this;
        }

        /// <summary>
        /// Set custom DNS search domains
        /// </summary>
        [ArgKey("dns-search")]
        public DockerCreateTask DnsSearch(string dnsSearch)
        {
            WithArgumentsKeyFromAttribute(dnsSearch.ToString());
            return this;
        }

        /// <summary>
        /// Container NIS domain name
        /// </summary>
        [ArgKey("domainname")]
        public DockerCreateTask Domainname(string domainname)
        {
            WithArgumentsKeyFromAttribute(domainname.ToString());
            return this;
        }

        /// <summary>
        /// Overwrite the default ENTRYPOINT of the image
        /// </summary>
        [ArgKey("entrypoint")]
        public DockerCreateTask Entrypoint(string entrypoint)
        {
            WithArgumentsKeyFromAttribute(entrypoint.ToString());
            return this;
        }

        /// <summary>
        /// Set environment variables
        /// </summary>
        [ArgKey("env")]
        public DockerCreateTask Env(string env)
        {
            WithArgumentsKeyFromAttribute(env.ToString());
            return this;
        }

        /// <summary>
        /// Read in a file of environment variables
        /// </summary>
        [ArgKey("env-file")]
        public DockerCreateTask EnvFile(string envFile)
        {
            WithArgumentsKeyFromAttribute(envFile.ToString());
            return this;
        }

        /// <summary>
        /// Expose a port or a range of ports
        /// </summary>
        [ArgKey("expose")]
        public DockerCreateTask Expose(string expose)
        {
            WithArgumentsKeyFromAttribute(expose.ToString());
            return this;
        }

        /// <summary>
        /// GPU devices to add to the container ('all' to pass all GPUs)
        /// </summary>
        [ArgKey("gpus")]
        public DockerCreateTask Gpus(string gpus)
        {
            WithArgumentsKeyFromAttribute(gpus.ToString());
            return this;
        }

        /// <summary>
        /// Add additional groups to join
        /// </summary>
        [ArgKey("group-add")]
        public DockerCreateTask GroupAdd(string groupAdd)
        {
            WithArgumentsKeyFromAttribute(groupAdd.ToString());
            return this;
        }

        /// <summary>
        /// Command to run to check health
        /// </summary>
        [ArgKey("health-cmd")]
        public DockerCreateTask HealthCmd(string healthCmd)
        {
            WithArgumentsKeyFromAttribute(healthCmd.ToString());
            return this;
        }

        /// <summary>
        /// Time between running the check (ms|s|m|h) (default 0s)
        /// </summary>
        [ArgKey("health-interval")]
        public DockerCreateTask HealthInterval(string healthInterval)
        {
            WithArgumentsKeyFromAttribute(healthInterval.ToString());
            return this;
        }

        /// <summary>
        /// Consecutive failures needed to report unhealthy
        /// </summary>
        [ArgKey("health-retries")]
        public DockerCreateTask HealthRetries(int healthRetries)
        {
            WithArgumentsKeyFromAttribute(healthRetries.ToString());
            return this;
        }

        /// <summary>
        /// Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)

        /// </summary>
        [ArgKey("health-start-period")]
        public DockerCreateTask HealthStartPeriod(string healthStartPeriod)
        {
            WithArgumentsKeyFromAttribute(healthStartPeriod.ToString());
            return this;
        }

        /// <summary>
        /// Maximum time to allow one check to run (ms|s|m|h) (default 0s)

        /// </summary>
        [ArgKey("health-timeout")]
        public DockerCreateTask HealthTimeout(string healthTimeout)
        {
            WithArgumentsKeyFromAttribute(healthTimeout.ToString());
            return this;
        }

        /// <summary>
        /// Print usage
        /// </summary>
        [ArgKey("help")]
        public DockerCreateTask Help()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Container host name
        /// </summary>
        [ArgKey("hostname")]
        public DockerCreateTask Hostname(string hostname)
        {
            WithArgumentsKeyFromAttribute(hostname.ToString());
            return this;
        }

        /// <summary>
        /// Run an init inside the container that forwards signals and reaps processes

        /// </summary>
        [ArgKey("init")]
        public DockerCreateTask Init()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Keep STDIN open even if not attached
        /// </summary>
        [ArgKey("interactive")]
        public DockerCreateTask Interactive()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Maximum IO bandwidth limit for the system drive (Windows only)

        /// </summary>
        [ArgKey("io-maxbandwidth")]
        public DockerCreateTask IoMaxbandwidth(string ioMaxbandwidth)
        {
            WithArgumentsKeyFromAttribute(ioMaxbandwidth.ToString());
            return this;
        }

        /// <summary>
        /// Maximum IOps limit for the system drive (Windows only)
        /// </summary>
        [ArgKey("io-maxiops")]
        public DockerCreateTask IoMaxiops(ulong ioMaxiops)
        {
            WithArgumentsKeyFromAttribute(ioMaxiops.ToString());
            return this;
        }

        /// <summary>
        /// IPv4 address (e.g., 172.30.100.104)
        /// </summary>
        [ArgKey("ip")]
        public DockerCreateTask Ip(string ip)
        {
            WithArgumentsKeyFromAttribute(ip.ToString());
            return this;
        }

        /// <summary>
        /// IPv6 address (e.g., 2001:db8::33)
        /// </summary>
        [ArgKey("ip6")]
        public DockerCreateTask Ip6(string ip6)
        {
            WithArgumentsKeyFromAttribute(ip6.ToString());
            return this;
        }

        /// <summary>
        /// IPC mode to use
        /// </summary>
        [ArgKey("ipc")]
        public DockerCreateTask Ipc(string ipc)
        {
            WithArgumentsKeyFromAttribute(ipc.ToString());
            return this;
        }

        /// <summary>
        /// Container isolation technology
        /// </summary>
        [ArgKey("isolation")]
        public DockerCreateTask Isolation(string isolation)
        {
            WithArgumentsKeyFromAttribute(isolation.ToString());
            return this;
        }

        /// <summary>
        /// Kernel memory limit
        /// </summary>
        [ArgKey("kernel-memory")]
        public DockerCreateTask KernelMemory(string kernelMemory)
        {
            WithArgumentsKeyFromAttribute(kernelMemory.ToString());
            return this;
        }

        /// <summary>
        /// Set meta data on a container
        /// </summary>
        [ArgKey("label")]
        public DockerCreateTask Label(string label)
        {
            WithArgumentsKeyFromAttribute(label.ToString());
            return this;
        }

        /// <summary>
        /// Read in a line delimited file of labels
        /// </summary>
        [ArgKey("label-file")]
        public DockerCreateTask LabelFile(string labelFile)
        {
            WithArgumentsKeyFromAttribute(labelFile.ToString());
            return this;
        }

        /// <summary>
        /// Add link to another container
        /// </summary>
        [ArgKey("link")]
        public DockerCreateTask Link(string link)
        {
            WithArgumentsKeyFromAttribute(link.ToString());
            return this;
        }

        /// <summary>
        /// Container IPv4/IPv6 link-local addresses
        /// </summary>
        [ArgKey("link-local-ip")]
        public DockerCreateTask LinkLocalIp(string linkLocalIp)
        {
            WithArgumentsKeyFromAttribute(linkLocalIp.ToString());
            return this;
        }

        /// <summary>
        /// Logging driver for the container
        /// </summary>
        [ArgKey("log-driver")]
        public DockerCreateTask LogDriver(string logDriver)
        {
            WithArgumentsKeyFromAttribute(logDriver.ToString());
            return this;
        }

        /// <summary>
        /// Log driver options
        /// </summary>
        [ArgKey("log-opt")]
        public DockerCreateTask LogOpt(string logOpt)
        {
            WithArgumentsKeyFromAttribute(logOpt.ToString());
            return this;
        }

        /// <summary>
        /// Container MAC address (e.g., 92:d0:c6:0a:29:33)
        /// </summary>
        [ArgKey("mac-address")]
        public DockerCreateTask MacAddress(string macAddress)
        {
            WithArgumentsKeyFromAttribute(macAddress.ToString());
            return this;
        }

        /// <summary>
        /// Memory limit
        /// </summary>
        [ArgKey("memory")]
        public DockerCreateTask Memory(string memory)
        {
            WithArgumentsKeyFromAttribute(memory.ToString());
            return this;
        }

        /// <summary>
        /// Memory soft limit
        /// </summary>
        [ArgKey("memory-reservation")]
        public DockerCreateTask MemoryReservation(string memoryReservation)
        {
            WithArgumentsKeyFromAttribute(memoryReservation.ToString());
            return this;
        }

        /// <summary>
        /// Swap limit equal to memory plus swap: '-1' to enable unlimited swap

        /// </summary>
        [ArgKey("memory-swap")]
        public DockerCreateTask MemorySwap(string memorySwap)
        {
            WithArgumentsKeyFromAttribute(memorySwap.ToString());
            return this;
        }

        /// <summary>
        /// Tune container memory swappiness (0 to 100)
        /// </summary>
        [ArgKey("memory-swappiness")]
        public DockerCreateTask MemorySwappiness(long memorySwappiness)
        {
            WithArgumentsKeyFromAttribute(memorySwappiness.ToString());
            return this;
        }

        /// <summary>
        /// Attach a filesystem mount to the container
        /// </summary>
        [ArgKey("mount")]
        public DockerCreateTask Mount(string mount)
        {
            WithArgumentsKeyFromAttribute(mount.ToString());
            return this;
        }

        /// <summary>
        /// Assign a name to the container
        /// </summary>
        [ArgKey("name")]
        public DockerCreateTask Name(string name)
        {
            WithArgumentsKeyFromAttribute(name.ToString());
            return this;
        }

        /// <summary>
        /// Connect a container to a network
        /// </summary>
        [ArgKey("net")]
        public DockerCreateTask Net(string net)
        {
            WithArgumentsKeyFromAttribute(net.ToString());
            return this;
        }

        /// <summary>
        /// Add network-scoped alias for the container
        /// </summary>
        [ArgKey("net-alias")]
        public DockerCreateTask NetAlias(string netAlias)
        {
            WithArgumentsKeyFromAttribute(netAlias.ToString());
            return this;
        }

        /// <summary>
        /// Connect a container to a network
        /// </summary>
        [ArgKey("network")]
        public DockerCreateTask Network(string network)
        {
            WithArgumentsKeyFromAttribute(network.ToString());
            return this;
        }

        /// <summary>
        /// Add network-scoped alias for the container
        /// </summary>
        [ArgKey("network-alias")]
        public DockerCreateTask NetworkAlias(string networkAlias)
        {
            WithArgumentsKeyFromAttribute(networkAlias.ToString());
            return this;
        }

        /// <summary>
        /// Disable any container-specified HEALTHCHECK
        /// </summary>
        [ArgKey("no-healthcheck")]
        public DockerCreateTask NoHealthcheck()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Disable OOM Killer
        /// </summary>
        [ArgKey("oom-kill-disable")]
        public DockerCreateTask OomKillDisable()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Tune host's OOM preferences (-1000 to 1000)
        /// </summary>
        [ArgKey("oom-score-adj")]
        public DockerCreateTask OomScoreAdj(int oomScoreAdj)
        {
            WithArgumentsKeyFromAttribute(oomScoreAdj.ToString());
            return this;
        }

        /// <summary>
        /// PID namespace to use
        /// </summary>
        [ArgKey("pid")]
        public DockerCreateTask Pid(string pid)
        {
            WithArgumentsKeyFromAttribute(pid.ToString());
            return this;
        }

        /// <summary>
        /// Tune container pids limit (set -1 for unlimited)
        /// </summary>
        [ArgKey("pids-limit")]
        public DockerCreateTask PidsLimit(long pidsLimit)
        {
            WithArgumentsKeyFromAttribute(pidsLimit.ToString());
            return this;
        }

        /// <summary>
        /// Set platform if server is multi-platform capable
        /// </summary>
        [ArgKey("platform")]
        public DockerCreateTask Platform(string platform)
        {
            WithArgumentsKeyFromAttribute(platform.ToString());
            return this;
        }

        /// <summary>
        /// Give extended privileges to this container
        /// </summary>
        [ArgKey("privileged")]
        public DockerCreateTask Privileged()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Publish a container's port(s) to the host
        /// </summary>
        [ArgKey("publish")]
        public DockerCreateTask Publish(string publish)
        {
            WithArgumentsKeyFromAttribute(publish.ToString());
            return this;
        }

        /// <summary>
        /// Publish all exposed ports to random ports
        /// </summary>
        [ArgKey("publish-all")]
        public DockerCreateTask PublishAll()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Mount the container's root filesystem as read only
        /// </summary>
        [ArgKey("read-only")]
        public DockerCreateTask ReadOnly()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Restart policy to apply when a container exits
        /// </summary>
        [ArgKey("restart")]
        public DockerCreateTask Restart(string restart)
        {
            WithArgumentsKeyFromAttribute(restart.ToString());
            return this;
        }

        /// <summary>
        /// Automatically remove the container when it exits
        /// </summary>
        [ArgKey("rm")]
        public DockerCreateTask Rm()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Runtime to use for this container
        /// </summary>
        [ArgKey("runtime")]
        public DockerCreateTask Runtime(string runtime)
        {
            WithArgumentsKeyFromAttribute(runtime.ToString());
            return this;
        }

        /// <summary>
        /// Security Options
        /// </summary>
        [ArgKey("security-opt")]
        public DockerCreateTask SecurityOpt(string securityOpt)
        {
            WithArgumentsKeyFromAttribute(securityOpt.ToString());
            return this;
        }

        /// <summary>
        /// Size of /dev/shm
        /// </summary>
        [ArgKey("shm-size")]
        public DockerCreateTask ShmSize(string shmSize)
        {
            WithArgumentsKeyFromAttribute(shmSize.ToString());
            return this;
        }

        /// <summary>
        /// Signal to stop a container
        /// </summary>
        [ArgKey("stop-signal")]
        public DockerCreateTask StopSignal(string stopSignal)
        {
            WithArgumentsKeyFromAttribute(stopSignal.ToString());
            return this;
        }

        /// <summary>
        /// Timeout (in seconds) to stop a container
        /// </summary>
        [ArgKey("stop-timeout")]
        public DockerCreateTask StopTimeout(int stopTimeout)
        {
            WithArgumentsKeyFromAttribute(stopTimeout.ToString());
            return this;
        }

        /// <summary>
        /// Storage driver options for the container
        /// </summary>
        [ArgKey("storage-opt")]
        public DockerCreateTask StorageOpt(string storageOpt)
        {
            WithArgumentsKeyFromAttribute(storageOpt.ToString());
            return this;
        }

        /// <summary>
        /// Sysctl options
        /// </summary>
        [ArgKey("sysctl")]
        public DockerCreateTask Sysctl(string sysctl)
        {
            WithArgumentsKeyFromAttribute(sysctl.ToString());
            return this;
        }

        /// <summary>
        /// Mount a tmpfs directory
        /// </summary>
        [ArgKey("tmpfs")]
        public DockerCreateTask Tmpfs(string tmpfs)
        {
            WithArgumentsKeyFromAttribute(tmpfs.ToString());
            return this;
        }

        /// <summary>
        /// Allocate a pseudo-TTY
        /// </summary>
        [ArgKey("tty")]
        public DockerCreateTask Tty()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Ulimit options
        /// </summary>
        [ArgKey("ulimit")]
        public DockerCreateTask Ulimit(string ulimit)
        {
            WithArgumentsKeyFromAttribute(ulimit.ToString());
            return this;
        }

        /// <summary>
        /// Username or UID (format: <name|uid>[:<group|gid>])
        /// </summary>
        [ArgKey("user")]
        public DockerCreateTask User(string user)
        {
            WithArgumentsKeyFromAttribute(user.ToString());
            return this;
        }

        /// <summary>
        /// User namespace to use
        /// </summary>
        [ArgKey("userns")]
        public DockerCreateTask Userns(string userns)
        {
            WithArgumentsKeyFromAttribute(userns.ToString());
            return this;
        }

        /// <summary>
        /// UTS namespace to use
        /// </summary>
        [ArgKey("uts")]
        public DockerCreateTask Uts(string uts)
        {
            WithArgumentsKeyFromAttribute(uts.ToString());
            return this;
        }

        /// <summary>
        /// Bind mount a volume
        /// </summary>
        [ArgKey("volume")]
        public DockerCreateTask Volume(string volume)
        {
            WithArgumentsKeyFromAttribute(volume.ToString());
            return this;
        }

        /// <summary>
        /// Optional volume driver for the container
        /// </summary>
        [ArgKey("volume-driver")]
        public DockerCreateTask VolumeDriver(string volumeDriver)
        {
            WithArgumentsKeyFromAttribute(volumeDriver.ToString());
            return this;
        }

        /// <summary>
        /// Mount volumes from the specified container(s)
        /// </summary>
        [ArgKey("volumes-from")]
        public DockerCreateTask VolumesFrom(string volumesFrom)
        {
            WithArgumentsKeyFromAttribute(volumesFrom.ToString());
            return this;
        }

        /// <summary>
        /// Working directory inside the container
        /// </summary>
        [ArgKey("workdir")]
        public DockerCreateTask Workdir(string workdir)
        {
            WithArgumentsKeyFromAttribute(workdir.ToString());
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
             WithArguments(_image);
 WithArguments(_command);
 WithArguments(_arg);

            return base.DoExecute(context);
        }

     }
}
