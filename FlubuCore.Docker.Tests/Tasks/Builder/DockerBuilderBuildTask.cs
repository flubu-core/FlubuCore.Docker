
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Builder
{
     public partial class DockerBuilderBuildTask : ExternalProcessTaskBase<int, DockerBuilderBuildTask>
     {
        private string _pathOrURL;

        
        public DockerBuilderBuildTask(string pathOrURL)
        {
            ExecutablePath = "docker";
            WithArgumentsKeyFromAttribute();
_pathOrURL = pathOrURL;

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Add a custom host-to-IP mapping (host:ip)
        /// </summary>
        [ArgKey("add-host")]
        public DockerBuilderBuildTask AddHost(string addHost)
        {
            WithArgumentsKeyFromAttribute(addHost.ToString());
            return this;
        }

        /// <summary>
        /// Set build-time variables
        /// </summary>
        [ArgKey("build-arg")]
        public DockerBuilderBuildTask BuildArg(string buildArg)
        {
            WithArgumentsKeyFromAttribute(buildArg.ToString());
            return this;
        }

        /// <summary>
        /// Images to consider as cache sources
        /// </summary>
        [ArgKey("cache-from")]
        public DockerBuilderBuildTask CacheFrom(string cacheFrom)
        {
            WithArgumentsKeyFromAttribute(cacheFrom.ToString());
            return this;
        }

        /// <summary>
        /// Optional parent cgroup for the container
        /// </summary>
        [ArgKey("cgroup-parent")]
        public DockerBuilderBuildTask CgroupParent(string cgroupParent)
        {
            WithArgumentsKeyFromAttribute(cgroupParent.ToString());
            return this;
        }

        /// <summary>
        /// Compress the build context using gzip
        /// </summary>
        [ArgKey("compress")]
        public DockerBuilderBuildTask Compress()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Limit the CPU CFS (Completely Fair Scheduler) period
        /// </summary>
        [ArgKey("cpu-period")]
        public DockerBuilderBuildTask CpuPeriod(long cpuPeriod)
        {
            WithArgumentsKeyFromAttribute(cpuPeriod.ToString());
            return this;
        }

        /// <summary>
        /// Limit the CPU CFS (Completely Fair Scheduler) quota
        /// </summary>
        [ArgKey("cpu-quota")]
        public DockerBuilderBuildTask CpuQuota(long cpuQuota)
        {
            WithArgumentsKeyFromAttribute(cpuQuota.ToString());
            return this;
        }

        /// <summary>
        /// CPU shares (relative weight)
        /// </summary>
        [ArgKey("cpu-shares")]
        public DockerBuilderBuildTask CpuShares(long cpuShares)
        {
            WithArgumentsKeyFromAttribute(cpuShares.ToString());
            return this;
        }

        /// <summary>
        /// CPUs in which to allow execution (0-3, 0,1)
        /// </summary>
        [ArgKey("cpuset-cpus")]
        public DockerBuilderBuildTask CpusetCpus(string cpusetCpus)
        {
            WithArgumentsKeyFromAttribute(cpusetCpus.ToString());
            return this;
        }

        /// <summary>
        /// MEMs in which to allow execution (0-3, 0,1)
        /// </summary>
        [ArgKey("cpuset-mems")]
        public DockerBuilderBuildTask CpusetMems(string cpusetMems)
        {
            WithArgumentsKeyFromAttribute(cpusetMems.ToString());
            return this;
        }

        /// <summary>
        /// Skip image verification
        /// </summary>
        [ArgKey("disable-content-trust")]
        public DockerBuilderBuildTask DisableContentTrust()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Name of the Dockerfile (Default is 'PATH/Dockerfile')
        /// </summary>
        [ArgKey("file")]
        public DockerBuilderBuildTask File(string file)
        {
            WithArgumentsKeyFromAttribute(file.ToString());
            return this;
        }

        /// <summary>
        /// Always remove intermediate containers
        /// </summary>
        [ArgKey("force-rm")]
        public DockerBuilderBuildTask ForceRm()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Write the image ID to the file
        /// </summary>
        [ArgKey("iidfile")]
        public DockerBuilderBuildTask Iidfile(string iidfile)
        {
            WithArgumentsKeyFromAttribute(iidfile.ToString());
            return this;
        }

        /// <summary>
        /// Container isolation technology
        /// </summary>
        [ArgKey("isolation")]
        public DockerBuilderBuildTask Isolation(string isolation)
        {
            WithArgumentsKeyFromAttribute(isolation.ToString());
            return this;
        }

        /// <summary>
        /// Set metadata for an image
        /// </summary>
        [ArgKey("label")]
        public DockerBuilderBuildTask Label(string label)
        {
            WithArgumentsKeyFromAttribute(label.ToString());
            return this;
        }

        /// <summary>
        /// Memory limit
        /// </summary>
        [ArgKey("memory")]
        public DockerBuilderBuildTask Memory(string memory)
        {
            WithArgumentsKeyFromAttribute(memory.ToString());
            return this;
        }

        /// <summary>
        /// Swap limit equal to memory plus swap: '-1' to enable unlimited swap

        /// </summary>
        [ArgKey("memory-swap")]
        public DockerBuilderBuildTask MemorySwap(string memorySwap)
        {
            WithArgumentsKeyFromAttribute(memorySwap.ToString());
            return this;
        }

        /// <summary>
        /// Set the networking mode for the RUN instructions during build

        /// </summary>
        [ArgKey("network")]
        public DockerBuilderBuildTask Network(string network)
        {
            WithArgumentsKeyFromAttribute(network.ToString());
            return this;
        }

        /// <summary>
        /// Do not use cache when building the image
        /// </summary>
        [ArgKey("no-cache")]
        public DockerBuilderBuildTask NoCache()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Output destination (format: type=local,dest=path)
        /// </summary>
        [ArgKey("output")]
        public DockerBuilderBuildTask Output(string output)
        {
            WithArgumentsKeyFromAttribute(output.ToString());
            return this;
        }

        /// <summary>
        /// Set platform if server is multi-platform capable
        /// </summary>
        [ArgKey("platform")]
        public DockerBuilderBuildTask Platform(string platform)
        {
            WithArgumentsKeyFromAttribute(platform.ToString());
            return this;
        }

        /// <summary>
        /// Set type of progress output (auto, plain, tty). Use plain to show container output

        /// </summary>
        [ArgKey("progress")]
        public DockerBuilderBuildTask Progress(string progress)
        {
            WithArgumentsKeyFromAttribute(progress.ToString());
            return this;
        }

        /// <summary>
        /// Always attempt to pull a newer version of the image
        /// </summary>
        [ArgKey("pull")]
        public DockerBuilderBuildTask Pull()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Suppress the build output and print image ID on success
        /// </summary>
        [ArgKey("quiet")]
        public DockerBuilderBuildTask Quiet()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Remove intermediate containers after a successful build
        /// </summary>
        [ArgKey("rm")]
        public DockerBuilderBuildTask Rm()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret

        /// </summary>
        [ArgKey("secret")]
        public DockerBuilderBuildTask Secret(string secret)
        {
            WithArgumentsKeyFromAttribute(secret.ToString());
            return this;
        }

        /// <summary>
        /// Security options
        /// </summary>
        [ArgKey("security-opt")]
        public DockerBuilderBuildTask SecurityOpt(string securityOpt)
        {
            WithArgumentsKeyFromAttribute(securityOpt.ToString());
            return this;
        }

        /// <summary>
        /// Size of /dev/shm
        /// </summary>
        [ArgKey("shm-size")]
        public DockerBuilderBuildTask ShmSize(string shmSize)
        {
            WithArgumentsKeyFromAttribute(shmSize.ToString());
            return this;
        }

        /// <summary>
        /// Squash newly built layers into a single new layer
        /// </summary>
        [ArgKey("squash")]
        public DockerBuilderBuildTask Squash()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|<id>[=<socket>|<key>[,<key>]])

        /// </summary>
        [ArgKey("ssh")]
        public DockerBuilderBuildTask Ssh(string ssh)
        {
            WithArgumentsKeyFromAttribute(ssh.ToString());
            return this;
        }

        /// <summary>
        /// Stream attaches to server to negotiate build context
        /// </summary>
        [ArgKey("stream")]
        public DockerBuilderBuildTask Stream()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Name and optionally a tag in the 'name:tag' format
        /// </summary>
        [ArgKey("tag")]
        public DockerBuilderBuildTask Tag(string tag)
        {
            WithArgumentsKeyFromAttribute(tag.ToString());
            return this;
        }

        /// <summary>
        /// Set the target build stage to build.
        /// </summary>
        [ArgKey("target")]
        public DockerBuilderBuildTask Target(string target)
        {
            WithArgumentsKeyFromAttribute(target.ToString());
            return this;
        }

        /// <summary>
        /// Ulimit options
        /// </summary>
        [ArgKey("ulimit")]
        public DockerBuilderBuildTask Ulimit(string ulimit)
        {
            WithArgumentsKeyFromAttribute(ulimit.ToString());
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
             WithArguments(_pathOrURL);

            return base.DoExecute(context);
        }

     }
}
