
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Builder
{
     public partial class DockerBuilderPruneTask : ExternalProcessTaskBase<int, DockerBuilderPruneTask>
     {
        
        
        public DockerBuilderPruneTask()
        {
            ExecutablePath = "docker";
            WithArgumentsKeyFromAttribute();

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Remove all unused images, not just dangling ones
        /// </summary>
        [ArgKey("all")]
        public DockerBuilderPruneTask All()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Provide filter values (e.g. 'unused-for=24h')
        /// </summary>
        [ArgKey("filter")]
        public DockerBuilderPruneTask Filter(string filter)
        {
            WithArgumentsKeyFromAttribute(filter.ToString());
            return this;
        }

        /// <summary>
        /// Do not prompt for confirmation
        /// </summary>
        [ArgKey("force")]
        public DockerBuilderPruneTask Force()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Amount of disk space to keep for cache
        /// </summary>
        [ArgKey("keep-storage")]
        public DockerBuilderPruneTask KeepStorage(string keepStorage)
        {
            WithArgumentsKeyFromAttribute(keepStorage.ToString());
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
            
            return base.DoExecute(context);
        }

     }
}
