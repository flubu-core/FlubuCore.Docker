
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Container
{
     public partial class DockerContainerUpdateTask : ExternalProcessTaskBase<int, DockerContainerUpdateTask>
     {
        private string[] _container;

        
        public DockerContainerUpdateTask(params string[] container)
        {
            ExecutablePath = "docker";
            WithArgumentsKeyFromAttribute();
_container = container;

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)

        /// </summary>
        [ArgKey("blkio-weight")]
        public DockerContainerUpdateTask BlkioWeight(string blkioWeight)
        {
            WithArgumentsKeyFromAttribute(blkioWeight.ToString());
            return this;
        }

        /// <summary>
        /// Limit CPU CFS (Completely Fair Scheduler) period
        /// </summary>
        [ArgKey("cpu-period")]
        public DockerContainerUpdateTask CpuPeriod(long cpuPeriod)
        {
            WithArgumentsKeyFromAttribute(cpuPeriod.ToString());
            return this;
        }

        /// <summary>
        /// Limit CPU CFS (Completely Fair Scheduler) quota
        /// </summary>
        [ArgKey("cpu-quota")]
        public DockerContainerUpdateTask CpuQuota(long cpuQuota)
        {
            WithArgumentsKeyFromAttribute(cpuQuota.ToString());
            return this;
        }

        /// <summary>
        /// Limit the CPU real-time period in microseconds
        /// </summary>
        [ArgKey("cpu-rt-period")]
        public DockerContainerUpdateTask CpuRtPeriod(long cpuRtPeriod)
        {
            WithArgumentsKeyFromAttribute(cpuRtPeriod.ToString());
            return this;
        }

        /// <summary>
        /// Limit the CPU real-time runtime in microseconds
        /// </summary>
        [ArgKey("cpu-rt-runtime")]
        public DockerContainerUpdateTask CpuRtRuntime(long cpuRtRuntime)
        {
            WithArgumentsKeyFromAttribute(cpuRtRuntime.ToString());
            return this;
        }

        /// <summary>
        /// CPU shares (relative weight)
        /// </summary>
        [ArgKey("cpu-shares")]
        public DockerContainerUpdateTask CpuShares(long cpuShares)
        {
            WithArgumentsKeyFromAttribute(cpuShares.ToString());
            return this;
        }

        /// <summary>
        /// Number of CPUs
        /// </summary>
        [ArgKey("cpus")]
        public DockerContainerUpdateTask Cpus(decimal cpus)
        {
            WithArgumentsKeyFromAttribute(cpus.ToString());
            return this;
        }

        /// <summary>
        /// CPUs in which to allow execution (0-3, 0,1)
        /// </summary>
        [ArgKey("cpuset-cpus")]
        public DockerContainerUpdateTask CpusetCpus(string cpusetCpus)
        {
            WithArgumentsKeyFromAttribute(cpusetCpus.ToString());
            return this;
        }

        /// <summary>
        /// MEMs in which to allow execution (0-3, 0,1)
        /// </summary>
        [ArgKey("cpuset-mems")]
        public DockerContainerUpdateTask CpusetMems(string cpusetMems)
        {
            WithArgumentsKeyFromAttribute(cpusetMems.ToString());
            return this;
        }

        /// <summary>
        /// Kernel memory limit
        /// </summary>
        [ArgKey("kernel-memory")]
        public DockerContainerUpdateTask KernelMemory(string kernelMemory)
        {
            WithArgumentsKeyFromAttribute(kernelMemory.ToString());
            return this;
        }

        /// <summary>
        /// Memory limit
        /// </summary>
        [ArgKey("memory")]
        public DockerContainerUpdateTask Memory(string memory)
        {
            WithArgumentsKeyFromAttribute(memory.ToString());
            return this;
        }

        /// <summary>
        /// Memory soft limit
        /// </summary>
        [ArgKey("memory-reservation")]
        public DockerContainerUpdateTask MemoryReservation(string memoryReservation)
        {
            WithArgumentsKeyFromAttribute(memoryReservation.ToString());
            return this;
        }

        /// <summary>
        /// Swap limit equal to memory plus swap: '-1' to enable unlimited swap

        /// </summary>
        [ArgKey("memory-swap")]
        public DockerContainerUpdateTask MemorySwap(string memorySwap)
        {
            WithArgumentsKeyFromAttribute(memorySwap.ToString());
            return this;
        }

        /// <summary>
        /// Tune container pids limit (set -1 for unlimited)
        /// </summary>
        [ArgKey("pids-limit")]
        public DockerContainerUpdateTask PidsLimit(long pidsLimit)
        {
            WithArgumentsKeyFromAttribute(pidsLimit.ToString());
            return this;
        }

        /// <summary>
        /// Restart policy to apply when a container exits
        /// </summary>
        [ArgKey("restart")]
        public DockerContainerUpdateTask Restart(string restart)
        {
            WithArgumentsKeyFromAttribute(restart.ToString());
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
             WithArguments(_container);

            return base.DoExecute(context);
        }

     }
}
