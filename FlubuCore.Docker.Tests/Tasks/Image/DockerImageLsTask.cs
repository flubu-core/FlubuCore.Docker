
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Image
{
     public partial class DockerImageLsTask : ExternalProcessTaskBase<int, DockerImageLsTask>
     {
        private string _repository;

        
        public DockerImageLsTask(string repository)
        {
            ExecutablePath = "docker";
            WithArgumentsKeyFromAttribute();
_repository = repository;

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Show all images (default hides intermediate images)
        /// </summary>
        [ArgKey("all")]
        public DockerImageLsTask All()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Show digests
        /// </summary>
        [ArgKey("digests")]
        public DockerImageLsTask Digests()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Filter output based on conditions provided
        /// </summary>
        [ArgKey("filter")]
        public DockerImageLsTask Filter(string filter)
        {
            WithArgumentsKeyFromAttribute(filter.ToString());
            return this;
        }

        /// <summary>
        /// Pretty-print images using a Go template
        /// </summary>
        [ArgKey("format")]
        public DockerImageLsTask Format(string format)
        {
            WithArgumentsKeyFromAttribute(format.ToString());
            return this;
        }

        /// <summary>
        /// Don't truncate output
        /// </summary>
        [ArgKey("no-trunc")]
        public DockerImageLsTask NoTrunc()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Only show numeric IDs
        /// </summary>
        [ArgKey("quiet")]
        public DockerImageLsTask Quiet()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
             WithArguments(_repository);

            return base.DoExecute(context);
        }

     }
}
