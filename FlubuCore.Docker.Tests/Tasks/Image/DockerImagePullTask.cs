
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Image
{
     public partial class DockerImagePullTask : ExternalProcessTaskBase<int, DockerImagePullTask>
     {
        private string _name;

        
        public DockerImagePullTask(string name)
        {
            ExecutablePath = "docker";
            WithArguments("image pull");
_name = name;

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Download all tagged images in the repository
        /// </summary>
        [ArgKey("--all-tags")]
        public DockerImagePullTask AllTags()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Skip image verification
        /// </summary>
        [ArgKey("--disable-content-trust")]
        public DockerImagePullTask DisableContentTrust()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Set platform if server is multi-platform capable
        /// </summary>
        [ArgKey("--platform")]
        public DockerImagePullTask Platform(string platform)
        {
            WithArgumentsKeyFromAttribute(platform.ToString());
            return this;
        }

        /// <summary>
        /// Suppress verbose output
        /// </summary>
        [ArgKey("--quiet")]
        public DockerImagePullTask Quiet()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
             WithArguments(_name);

            return base.DoExecute(context);
        }

     }
}
