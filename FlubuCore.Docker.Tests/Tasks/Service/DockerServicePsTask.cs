
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Service
{
     public partial class DockerServicePsTask : ExternalProcessTaskBase<int, DockerServicePsTask>
     {
        private string[] _service;

        
        public DockerServicePsTask(params string[] service)
        {
            ExecutablePath = "docker";
            WithArguments("service ps");
_service = service;

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Filter output based on conditions provided
        /// </summary>
        [ArgKey("--filter")]
        public DockerServicePsTask Filter(string filter)
        {
            WithArgumentsKeyFromAttribute(filter.ToString());
            return this;
        }

        /// <summary>
        /// Pretty-print tasks using a Go template
        /// </summary>
        [ArgKey("--format")]
        public DockerServicePsTask Format(string format)
        {
            WithArgumentsKeyFromAttribute(format.ToString());
            return this;
        }

        /// <summary>
        /// Do not map IDs to Names
        /// </summary>
        [ArgKey("--no-resolve")]
        public DockerServicePsTask NoResolve()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Do not truncate output
        /// </summary>
        [ArgKey("--no-trunc")]
        public DockerServicePsTask NoTrunc()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Only display task IDs
        /// </summary>
        [ArgKey("--quiet")]
        public DockerServicePsTask Quiet()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
             WithArguments(_service);

            return base.DoExecute(context);
        }

     }
}
