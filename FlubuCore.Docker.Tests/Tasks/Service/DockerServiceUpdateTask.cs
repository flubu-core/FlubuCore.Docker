
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Service
{
     public partial class DockerServiceUpdateTask : ExternalProcessTaskBase<int, DockerServiceUpdateTask>
     {
        private string _service;

        
        public DockerServiceUpdateTask(string service)
        {
            ExecutablePath = "docker";
            WithArgumentsKeyFromAttribute();
_service = service;

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Service command args
        /// </summary>
        [ArgKey("args")]
        public DockerServiceUpdateTask Args(string args)
        {
            WithArgumentsKeyFromAttribute(args.ToString());
            return this;
        }

        /// <summary>
        /// Add or update a config file on a service
        /// </summary>
        [ArgKey("config-add")]
        public DockerServiceUpdateTask ConfigAdd(string configAdd)
        {
            WithArgumentsKeyFromAttribute(configAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a configuration file
        /// </summary>
        [ArgKey("config-rm")]
        public DockerServiceUpdateTask ConfigRm(string configRm)
        {
            WithArgumentsKeyFromAttribute(configRm.ToString());
            return this;
        }

        /// <summary>
        /// Add or update a placement constraint
        /// </summary>
        [ArgKey("constraint-add")]
        public DockerServiceUpdateTask ConstraintAdd(string constraintAdd)
        {
            WithArgumentsKeyFromAttribute(constraintAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a constraint
        /// </summary>
        [ArgKey("constraint-rm")]
        public DockerServiceUpdateTask ConstraintRm(string constraintRm)
        {
            WithArgumentsKeyFromAttribute(constraintRm.ToString());
            return this;
        }

        /// <summary>
        /// Add or update a container label
        /// </summary>
        [ArgKey("container-label-add")]
        public DockerServiceUpdateTask ContainerLabelAdd(string containerLabelAdd)
        {
            WithArgumentsKeyFromAttribute(containerLabelAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a container label by its key
        /// </summary>
        [ArgKey("container-label-rm")]
        public DockerServiceUpdateTask ContainerLabelRm(string containerLabelRm)
        {
            WithArgumentsKeyFromAttribute(containerLabelRm.ToString());
            return this;
        }

        /// <summary>
        /// Credential spec for managed service account (Windows only)
        /// </summary>
        [ArgKey("credential-spec")]
        public DockerServiceUpdateTask CredentialSpec(string credentialSpec)
        {
            WithArgumentsKeyFromAttribute(credentialSpec.ToString());
            return this;
        }

        /// <summary>
        /// Exit immediately instead of waiting for the service to converge

        /// </summary>
        [ArgKey("detach")]
        public DockerServiceUpdateTask Detach()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Add or update a custom DNS server
        /// </summary>
        [ArgKey("dns-add")]
        public DockerServiceUpdateTask DnsAdd(string dnsAdd)
        {
            WithArgumentsKeyFromAttribute(dnsAdd.ToString());
            return this;
        }

        /// <summary>
        /// Add or update a DNS option
        /// </summary>
        [ArgKey("dns-option-add")]
        public DockerServiceUpdateTask DnsOptionAdd(string dnsOptionAdd)
        {
            WithArgumentsKeyFromAttribute(dnsOptionAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a DNS option
        /// </summary>
        [ArgKey("dns-option-rm")]
        public DockerServiceUpdateTask DnsOptionRm(string dnsOptionRm)
        {
            WithArgumentsKeyFromAttribute(dnsOptionRm.ToString());
            return this;
        }

        /// <summary>
        /// Remove a custom DNS server
        /// </summary>
        [ArgKey("dns-rm")]
        public DockerServiceUpdateTask DnsRm(string dnsRm)
        {
            WithArgumentsKeyFromAttribute(dnsRm.ToString());
            return this;
        }

        /// <summary>
        /// Add or update a custom DNS search domain
        /// </summary>
        [ArgKey("dns-search-add")]
        public DockerServiceUpdateTask DnsSearchAdd(string dnsSearchAdd)
        {
            WithArgumentsKeyFromAttribute(dnsSearchAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a DNS search domain
        /// </summary>
        [ArgKey("dns-search-rm")]
        public DockerServiceUpdateTask DnsSearchRm(string dnsSearchRm)
        {
            WithArgumentsKeyFromAttribute(dnsSearchRm.ToString());
            return this;
        }

        /// <summary>
        /// Endpoint mode (vip or dnsrr)
        /// </summary>
        [ArgKey("endpoint-mode")]
        public DockerServiceUpdateTask EndpointMode(string endpointMode)
        {
            WithArgumentsKeyFromAttribute(endpointMode.ToString());
            return this;
        }

        /// <summary>
        /// Overwrite the default ENTRYPOINT of the image
        /// </summary>
        [ArgKey("entrypoint")]
        public DockerServiceUpdateTask Entrypoint(string entrypoint)
        {
            WithArgumentsKeyFromAttribute(entrypoint.ToString());
            return this;
        }

        /// <summary>
        /// Add or update an environment variable
        /// </summary>
        [ArgKey("env-add")]
        public DockerServiceUpdateTask EnvAdd(string envAdd)
        {
            WithArgumentsKeyFromAttribute(envAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove an environment variable
        /// </summary>
        [ArgKey("env-rm")]
        public DockerServiceUpdateTask EnvRm(string envRm)
        {
            WithArgumentsKeyFromAttribute(envRm.ToString());
            return this;
        }

        /// <summary>
        /// Force update even if no changes require it
        /// </summary>
        [ArgKey("force")]
        public DockerServiceUpdateTask Force()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Add a Generic resource
        /// </summary>
        [ArgKey("generic-resource-add")]
        public DockerServiceUpdateTask GenericResourceAdd(string genericResourceAdd)
        {
            WithArgumentsKeyFromAttribute(genericResourceAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a Generic resource
        /// </summary>
        [ArgKey("generic-resource-rm")]
        public DockerServiceUpdateTask GenericResourceRm(string genericResourceRm)
        {
            WithArgumentsKeyFromAttribute(genericResourceRm.ToString());
            return this;
        }

        /// <summary>
        /// Add an additional supplementary user group to the container
        /// </summary>
        [ArgKey("group-add")]
        public DockerServiceUpdateTask GroupAdd(string groupAdd)
        {
            WithArgumentsKeyFromAttribute(groupAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a previously added supplementary user group from the container

        /// </summary>
        [ArgKey("group-rm")]
        public DockerServiceUpdateTask GroupRm(string groupRm)
        {
            WithArgumentsKeyFromAttribute(groupRm.ToString());
            return this;
        }

        /// <summary>
        /// Command to run to check health
        /// </summary>
        [ArgKey("health-cmd")]
        public DockerServiceUpdateTask HealthCmd(string healthCmd)
        {
            WithArgumentsKeyFromAttribute(healthCmd.ToString());
            return this;
        }

        /// <summary>
        /// Time between running the check (ms|s|m|h)
        /// </summary>
        [ArgKey("health-interval")]
        public DockerServiceUpdateTask HealthInterval(string healthInterval)
        {
            WithArgumentsKeyFromAttribute(healthInterval.ToString());
            return this;
        }

        /// <summary>
        /// Consecutive failures needed to report unhealthy
        /// </summary>
        [ArgKey("health-retries")]
        public DockerServiceUpdateTask HealthRetries(int healthRetries)
        {
            WithArgumentsKeyFromAttribute(healthRetries.ToString());
            return this;
        }

        /// <summary>
        /// Start period for the container to initialize before counting retries towards unstable (ms|s|m|h)

        /// </summary>
        [ArgKey("health-start-period")]
        public DockerServiceUpdateTask HealthStartPeriod(string healthStartPeriod)
        {
            WithArgumentsKeyFromAttribute(healthStartPeriod.ToString());
            return this;
        }

        /// <summary>
        /// Maximum time to allow one check to run (ms|s|m|h)
        /// </summary>
        [ArgKey("health-timeout")]
        public DockerServiceUpdateTask HealthTimeout(string healthTimeout)
        {
            WithArgumentsKeyFromAttribute(healthTimeout.ToString());
            return this;
        }

        /// <summary>
        /// Add a custom host-to-IP mapping (host:ip)
        /// </summary>
        [ArgKey("host-add")]
        public DockerServiceUpdateTask HostAdd(string hostAdd)
        {
            WithArgumentsKeyFromAttribute(hostAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a custom host-to-IP mapping (host:ip)
        /// </summary>
        [ArgKey("host-rm")]
        public DockerServiceUpdateTask HostRm(string hostRm)
        {
            WithArgumentsKeyFromAttribute(hostRm.ToString());
            return this;
        }

        /// <summary>
        /// Container hostname
        /// </summary>
        [ArgKey("hostname")]
        public DockerServiceUpdateTask Hostname(string hostname)
        {
            WithArgumentsKeyFromAttribute(hostname.ToString());
            return this;
        }

        /// <summary>
        /// Service image tag
        /// </summary>
        [ArgKey("image")]
        public DockerServiceUpdateTask Image(string image)
        {
            WithArgumentsKeyFromAttribute(image.ToString());
            return this;
        }

        /// <summary>
        /// Use an init inside each service container to forward signals and reap processes

        /// </summary>
        [ArgKey("init")]
        public DockerServiceUpdateTask Init()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Service container isolation mode
        /// </summary>
        [ArgKey("isolation")]
        public DockerServiceUpdateTask Isolation(string isolation)
        {
            WithArgumentsKeyFromAttribute(isolation.ToString());
            return this;
        }

        /// <summary>
        /// Add or update a service label
        /// </summary>
        [ArgKey("label-add")]
        public DockerServiceUpdateTask LabelAdd(string labelAdd)
        {
            WithArgumentsKeyFromAttribute(labelAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a label by its key
        /// </summary>
        [ArgKey("label-rm")]
        public DockerServiceUpdateTask LabelRm(string labelRm)
        {
            WithArgumentsKeyFromAttribute(labelRm.ToString());
            return this;
        }

        /// <summary>
        /// Limit CPUs
        /// </summary>
        [ArgKey("limit-cpu")]
        public DockerServiceUpdateTask LimitCpu(decimal limitCpu)
        {
            WithArgumentsKeyFromAttribute(limitCpu.ToString());
            return this;
        }

        /// <summary>
        /// Limit Memory
        /// </summary>
        [ArgKey("limit-memory")]
        public DockerServiceUpdateTask LimitMemory(string limitMemory)
        {
            WithArgumentsKeyFromAttribute(limitMemory.ToString());
            return this;
        }

        /// <summary>
        /// Logging driver for service
        /// </summary>
        [ArgKey("log-driver")]
        public DockerServiceUpdateTask LogDriver(string logDriver)
        {
            WithArgumentsKeyFromAttribute(logDriver.ToString());
            return this;
        }

        /// <summary>
        /// Logging driver options
        /// </summary>
        [ArgKey("log-opt")]
        public DockerServiceUpdateTask LogOpt(string logOpt)
        {
            WithArgumentsKeyFromAttribute(logOpt.ToString());
            return this;
        }

        /// <summary>
        /// Add or update a mount on a service
        /// </summary>
        [ArgKey("mount-add")]
        public DockerServiceUpdateTask MountAdd(string mountAdd)
        {
            WithArgumentsKeyFromAttribute(mountAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a mount by its target path
        /// </summary>
        [ArgKey("mount-rm")]
        public DockerServiceUpdateTask MountRm(string mountRm)
        {
            WithArgumentsKeyFromAttribute(mountRm.ToString());
            return this;
        }

        /// <summary>
        /// Add a network
        /// </summary>
        [ArgKey("network-add")]
        public DockerServiceUpdateTask NetworkAdd(string networkAdd)
        {
            WithArgumentsKeyFromAttribute(networkAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a network
        /// </summary>
        [ArgKey("network-rm")]
        public DockerServiceUpdateTask NetworkRm(string networkRm)
        {
            WithArgumentsKeyFromAttribute(networkRm.ToString());
            return this;
        }

        /// <summary>
        /// Disable any container-specified HEALTHCHECK
        /// </summary>
        [ArgKey("no-healthcheck")]
        public DockerServiceUpdateTask NoHealthcheck()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Do not query the registry to resolve image digest and supported platforms

        /// </summary>
        [ArgKey("no-resolve-image")]
        public DockerServiceUpdateTask NoResolveImage()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Add a placement preference
        /// </summary>
        [ArgKey("placement-pref-add")]
        public DockerServiceUpdateTask PlacementPrefAdd(string placementPrefAdd)
        {
            WithArgumentsKeyFromAttribute(placementPrefAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a placement preference
        /// </summary>
        [ArgKey("placement-pref-rm")]
        public DockerServiceUpdateTask PlacementPrefRm(string placementPrefRm)
        {
            WithArgumentsKeyFromAttribute(placementPrefRm.ToString());
            return this;
        }

        /// <summary>
        /// Add or update a published port
        /// </summary>
        [ArgKey("publish-add")]
        public DockerServiceUpdateTask PublishAdd(string publishAdd)
        {
            WithArgumentsKeyFromAttribute(publishAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a published port by its target port
        /// </summary>
        [ArgKey("publish-rm")]
        public DockerServiceUpdateTask PublishRm(string publishRm)
        {
            WithArgumentsKeyFromAttribute(publishRm.ToString());
            return this;
        }

        /// <summary>
        /// Suppress progress output
        /// </summary>
        [ArgKey("quiet")]
        public DockerServiceUpdateTask Quiet()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Mount the container's root filesystem as read only
        /// </summary>
        [ArgKey("read-only")]
        public DockerServiceUpdateTask ReadOnly()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Number of tasks
        /// </summary>
        [ArgKey("replicas")]
        public DockerServiceUpdateTask Replicas(uint replicas)
        {
            WithArgumentsKeyFromAttribute(replicas.ToString());
            return this;
        }

        /// <summary>
        /// Maximum number of tasks per node (default 0 = unlimited)
        /// </summary>
        [ArgKey("replicas-max-per-node")]
        public DockerServiceUpdateTask ReplicasMaxPerNode(ulong replicasMaxPerNode)
        {
            WithArgumentsKeyFromAttribute(replicasMaxPerNode.ToString());
            return this;
        }

        /// <summary>
        /// Reserve CPUs
        /// </summary>
        [ArgKey("reserve-cpu")]
        public DockerServiceUpdateTask ReserveCpu(decimal reserveCpu)
        {
            WithArgumentsKeyFromAttribute(reserveCpu.ToString());
            return this;
        }

        /// <summary>
        /// Reserve Memory
        /// </summary>
        [ArgKey("reserve-memory")]
        public DockerServiceUpdateTask ReserveMemory(string reserveMemory)
        {
            WithArgumentsKeyFromAttribute(reserveMemory.ToString());
            return this;
        }

        /// <summary>
        /// Restart when condition is met ("none"|"on-failure"|"any")
        /// </summary>
        [ArgKey("restart-condition")]
        public DockerServiceUpdateTask RestartCondition(string restartCondition)
        {
            WithArgumentsKeyFromAttribute(restartCondition.ToString());
            return this;
        }

        /// <summary>
        /// Delay between restart attempts (ns|us|ms|s|m|h)
        /// </summary>
        [ArgKey("restart-delay")]
        public DockerServiceUpdateTask RestartDelay(string restartDelay)
        {
            WithArgumentsKeyFromAttribute(restartDelay.ToString());
            return this;
        }

        /// <summary>
        /// Maximum number of restarts before giving up
        /// </summary>
        [ArgKey("restart-max-attempts")]
        public DockerServiceUpdateTask RestartMaxAttempts(uint restartMaxAttempts)
        {
            WithArgumentsKeyFromAttribute(restartMaxAttempts.ToString());
            return this;
        }

        /// <summary>
        /// Window used to evaluate the restart policy (ns|us|ms|s|m|h)
        /// </summary>
        [ArgKey("restart-window")]
        public DockerServiceUpdateTask RestartWindow(string restartWindow)
        {
            WithArgumentsKeyFromAttribute(restartWindow.ToString());
            return this;
        }

        /// <summary>
        /// Rollback to previous specification
        /// </summary>
        [ArgKey("rollback")]
        public DockerServiceUpdateTask Rollback()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Delay between task rollbacks (ns|us|ms|s|m|h)
        /// </summary>
        [ArgKey("rollback-delay")]
        public DockerServiceUpdateTask RollbackDelay(string rollbackDelay)
        {
            WithArgumentsKeyFromAttribute(rollbackDelay.ToString());
            return this;
        }

        /// <summary>
        /// Action on rollback failure ("pause"|"continue")
        /// </summary>
        [ArgKey("rollback-failure-action")]
        public DockerServiceUpdateTask RollbackFailureAction(string rollbackFailureAction)
        {
            WithArgumentsKeyFromAttribute(rollbackFailureAction.ToString());
            return this;
        }

        /// <summary>
        /// Failure rate to tolerate during a rollback
        /// </summary>
        [ArgKey("rollback-max-failure-ratio")]
        public DockerServiceUpdateTask RollbackMaxFailureRatio(float rollbackMaxFailureRatio)
        {
            WithArgumentsKeyFromAttribute(rollbackMaxFailureRatio.ToString());
            return this;
        }

        /// <summary>
        /// Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h)

        /// </summary>
        [ArgKey("rollback-monitor")]
        public DockerServiceUpdateTask RollbackMonitor(string rollbackMonitor)
        {
            WithArgumentsKeyFromAttribute(rollbackMonitor.ToString());
            return this;
        }

        /// <summary>
        /// Rollback order ("start-first"|"stop-first")
        /// </summary>
        [ArgKey("rollback-order")]
        public DockerServiceUpdateTask RollbackOrder(string rollbackOrder)
        {
            WithArgumentsKeyFromAttribute(rollbackOrder.ToString());
            return this;
        }

        /// <summary>
        /// Maximum number of tasks rolled back simultaneously (0 to roll back all at once)

        /// </summary>
        [ArgKey("rollback-parallelism")]
        public DockerServiceUpdateTask RollbackParallelism(ulong rollbackParallelism)
        {
            WithArgumentsKeyFromAttribute(rollbackParallelism.ToString());
            return this;
        }

        /// <summary>
        /// Add or update a secret on a service
        /// </summary>
        [ArgKey("secret-add")]
        public DockerServiceUpdateTask SecretAdd(string secretAdd)
        {
            WithArgumentsKeyFromAttribute(secretAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a secret
        /// </summary>
        [ArgKey("secret-rm")]
        public DockerServiceUpdateTask SecretRm(string secretRm)
        {
            WithArgumentsKeyFromAttribute(secretRm.ToString());
            return this;
        }

        /// <summary>
        /// Time to wait before force killing a container (ns|us|ms|s|m|h)

        /// </summary>
        [ArgKey("stop-grace-period")]
        public DockerServiceUpdateTask StopGracePeriod(string stopGracePeriod)
        {
            WithArgumentsKeyFromAttribute(stopGracePeriod.ToString());
            return this;
        }

        /// <summary>
        /// Signal to stop the container
        /// </summary>
        [ArgKey("stop-signal")]
        public DockerServiceUpdateTask StopSignal(string stopSignal)
        {
            WithArgumentsKeyFromAttribute(stopSignal.ToString());
            return this;
        }

        /// <summary>
        /// Add or update a Sysctl option
        /// </summary>
        [ArgKey("sysctl-add")]
        public DockerServiceUpdateTask SysctlAdd(string sysctlAdd)
        {
            WithArgumentsKeyFromAttribute(sysctlAdd.ToString());
            return this;
        }

        /// <summary>
        /// Remove a Sysctl option
        /// </summary>
        [ArgKey("sysctl-rm")]
        public DockerServiceUpdateTask SysctlRm(string sysctlRm)
        {
            WithArgumentsKeyFromAttribute(sysctlRm.ToString());
            return this;
        }

        /// <summary>
        /// Allocate a pseudo-TTY
        /// </summary>
        [ArgKey("tty")]
        public DockerServiceUpdateTask Tty()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Delay between updates (ns|us|ms|s|m|h)
        /// </summary>
        [ArgKey("update-delay")]
        public DockerServiceUpdateTask UpdateDelay(string updateDelay)
        {
            WithArgumentsKeyFromAttribute(updateDelay.ToString());
            return this;
        }

        /// <summary>
        /// Action on update failure ("pause"|"continue"|"rollback")
        /// </summary>
        [ArgKey("update-failure-action")]
        public DockerServiceUpdateTask UpdateFailureAction(string updateFailureAction)
        {
            WithArgumentsKeyFromAttribute(updateFailureAction.ToString());
            return this;
        }

        /// <summary>
        /// Failure rate to tolerate during an update
        /// </summary>
        [ArgKey("update-max-failure-ratio")]
        public DockerServiceUpdateTask UpdateMaxFailureRatio(float updateMaxFailureRatio)
        {
            WithArgumentsKeyFromAttribute(updateMaxFailureRatio.ToString());
            return this;
        }

        /// <summary>
        /// Duration after each task update to monitor for failure (ns|us|ms|s|m|h)

        /// </summary>
        [ArgKey("update-monitor")]
        public DockerServiceUpdateTask UpdateMonitor(string updateMonitor)
        {
            WithArgumentsKeyFromAttribute(updateMonitor.ToString());
            return this;
        }

        /// <summary>
        /// Update order ("start-first"|"stop-first")
        /// </summary>
        [ArgKey("update-order")]
        public DockerServiceUpdateTask UpdateOrder(string updateOrder)
        {
            WithArgumentsKeyFromAttribute(updateOrder.ToString());
            return this;
        }

        /// <summary>
        /// Maximum number of tasks updated simultaneously (0 to update all at once)

        /// </summary>
        [ArgKey("update-parallelism")]
        public DockerServiceUpdateTask UpdateParallelism(ulong updateParallelism)
        {
            WithArgumentsKeyFromAttribute(updateParallelism.ToString());
            return this;
        }

        /// <summary>
        /// Username or UID (format: <name|uid>[:<group|gid>])
        /// </summary>
        [ArgKey("user")]
        public DockerServiceUpdateTask User(string user)
        {
            WithArgumentsKeyFromAttribute(user.ToString());
            return this;
        }

        /// <summary>
        /// Send registry authentication details to swarm agents
        /// </summary>
        [ArgKey("with-registry-auth")]
        public DockerServiceUpdateTask WithRegistryAuth()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Working directory inside the container
        /// </summary>
        [ArgKey("workdir")]
        public DockerServiceUpdateTask Workdir(string workdir)
        {
            WithArgumentsKeyFromAttribute(workdir.ToString());
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
             WithArguments(_service);

            return base.DoExecute(context);
        }

     }
}
