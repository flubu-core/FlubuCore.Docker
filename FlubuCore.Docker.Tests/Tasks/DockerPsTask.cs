
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker
{
     public partial class DockerPsTask : ExternalProcessTaskBase<int, DockerPsTask>
     {
        
        
        public DockerPsTask()
        {
            ExecutablePath = "docker";
            WithArgumentsKeyFromAttribute();

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Show all containers (default shows just running)
        /// </summary>
        [ArgKey("all")]
        public DockerPsTask All()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Filter output based on conditions provided
        /// </summary>
        [ArgKey("filter")]
        public DockerPsTask Filter(string filter)
        {
            WithArgumentsKeyFromAttribute(filter.ToString());
            return this;
        }

        /// <summary>
        /// Pretty-print containers using a Go template
        /// </summary>
        [ArgKey("format")]
        public DockerPsTask Format(string format)
        {
            WithArgumentsKeyFromAttribute(format.ToString());
            return this;
        }

        /// <summary>
        /// Show n last created containers (includes all states)
        /// </summary>
        [ArgKey("last")]
        public DockerPsTask Last(int last)
        {
            WithArgumentsKeyFromAttribute(last.ToString());
            return this;
        }

        /// <summary>
        /// Show the latest created container (includes all states)
        /// </summary>
        [ArgKey("latest")]
        public DockerPsTask Latest()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Don't truncate output
        /// </summary>
        [ArgKey("no-trunc")]
        public DockerPsTask NoTrunc()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Only display numeric IDs
        /// </summary>
        [ArgKey("quiet")]
        public DockerPsTask Quiet()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Display total file sizes
        /// </summary>
        [ArgKey("size")]
        public DockerPsTask Size()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
            
            return base.DoExecute(context);
        }

     }
}
