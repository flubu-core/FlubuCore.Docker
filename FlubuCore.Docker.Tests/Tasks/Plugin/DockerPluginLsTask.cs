
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Plugin
{
     public partial class DockerPluginLsTask : ExternalProcessTaskBase<int, DockerPluginLsTask>
     {
        
        
        public DockerPluginLsTask()
        {
            ExecutablePath = "docker";
            WithArguments("plugin ls");

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Provide filter values (e.g. 'enabled=true')
        /// </summary>
        [ArgKey("--filter")]
        public DockerPluginLsTask Filter(string filter)
        {
            WithArgumentsKeyFromAttribute(filter.ToString());
            return this;
        }

        /// <summary>
        /// Pretty-print plugins using a Go template
        /// </summary>
        [ArgKey("--format")]
        public DockerPluginLsTask Format(string format)
        {
            WithArgumentsKeyFromAttribute(format.ToString());
            return this;
        }

        /// <summary>
        /// Don't truncate output
        /// </summary>
        [ArgKey("--no-trunc")]
        public DockerPluginLsTask NoTrunc()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Only display plugin IDs
        /// </summary>
        [ArgKey("--quiet")]
        public DockerPluginLsTask Quiet()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
            
            return base.DoExecute(context);
        }

     }
}
