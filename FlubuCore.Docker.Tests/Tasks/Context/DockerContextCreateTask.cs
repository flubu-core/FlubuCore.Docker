
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Context
{
     public partial class DockerContextCreateTask : ExternalProcessTaskBase<int, DockerContextCreateTask>
     {
        private string _context;

        
        public DockerContextCreateTask(string context)
        {
            ExecutablePath = "docker";
            WithArguments("context create");
_context = context;

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Default orchestrator for stack operations to use with this context (swarm|kubernetes|all)

        /// </summary>
        [ArgKey("--default-stack-orchestrator")]
        public DockerContextCreateTask DefaultStackOrchestrator(string defaultStackOrchestrator)
        {
            WithArgumentsKeyFromAttribute(defaultStackOrchestrator.ToString());
            return this;
        }

        /// <summary>
        /// Description of the context
        /// </summary>
        [ArgKey("--description")]
        public DockerContextCreateTask DockerDescription(string description)
        {
            WithArgumentsKeyFromAttribute(description.ToString());
            return this;
        }

        /// <summary>
        /// set the docker endpoint
        /// </summary>
        [ArgKey("--docker")]
        public DockerContextCreateTask Docker(string docker)
        {
            WithArgumentsKeyFromAttribute(docker.ToString());
            return this;
        }

        /// <summary>
        /// create context from a named context
        /// </summary>
        [ArgKey("--from")]
        public DockerContextCreateTask From(string from)
        {
            WithArgumentsKeyFromAttribute(from.ToString());
            return this;
        }

        /// <summary>
        /// set the kubernetes endpoint
        /// </summary>
        [ArgKey("--kubernetes")]
        public DockerContextCreateTask Kubernetes(string kubernetes)
        {
            WithArgumentsKeyFromAttribute(kubernetes.ToString());
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
             WithArguments(_context);

            return base.DoExecute(context);
        }

     }
}
