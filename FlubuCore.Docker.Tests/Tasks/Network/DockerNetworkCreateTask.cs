
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Network
{
     public partial class DockerNetworkCreateTask : ExternalProcessTaskBase<int, DockerNetworkCreateTask>
     {
        private string _network;

        
        public DockerNetworkCreateTask(string network)
        {
            ExecutablePath = "docker";
            WithArgumentsKeyFromAttribute();
_network = network;

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Enable manual container attachment
        /// </summary>
        [ArgKey("attachable")]
        public DockerNetworkCreateTask Attachable()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Auxiliary IPv4 or IPv6 addresses used by Network driver
        /// </summary>
        [ArgKey("aux-address")]
        public DockerNetworkCreateTask AuxAddress(string auxAddress)
        {
            WithArgumentsKeyFromAttribute(auxAddress.ToString());
            return this;
        }

        /// <summary>
        /// The network from which copying the configuration
        /// </summary>
        [ArgKey("config-from")]
        public DockerNetworkCreateTask ConfigFrom(string configFrom)
        {
            WithArgumentsKeyFromAttribute(configFrom.ToString());
            return this;
        }

        /// <summary>
        /// Create a configuration only network
        /// </summary>
        [ArgKey("config-only")]
        public DockerNetworkCreateTask ConfigOnly()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Driver to manage the Network
        /// </summary>
        [ArgKey("driver")]
        public DockerNetworkCreateTask Driver(string driver)
        {
            WithArgumentsKeyFromAttribute(driver.ToString());
            return this;
        }

        /// <summary>
        /// IPv4 or IPv6 Gateway for the master subnet
        /// </summary>
        [ArgKey("gateway")]
        public DockerNetworkCreateTask Gateway(string gateway)
        {
            WithArgumentsKeyFromAttribute(gateway.ToString());
            return this;
        }

        /// <summary>
        /// Create swarm routing-mesh network
        /// </summary>
        [ArgKey("ingress")]
        public DockerNetworkCreateTask Ingress()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Restrict external access to the network
        /// </summary>
        [ArgKey("internal")]
        public DockerNetworkCreateTask Internal()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Allocate container ip from a sub-range
        /// </summary>
        [ArgKey("ip-range")]
        public DockerNetworkCreateTask IpRange(string ipRange)
        {
            WithArgumentsKeyFromAttribute(ipRange.ToString());
            return this;
        }

        /// <summary>
        /// IP Address Management Driver
        /// </summary>
        [ArgKey("ipam-driver")]
        public DockerNetworkCreateTask IpamDriver(string ipamDriver)
        {
            WithArgumentsKeyFromAttribute(ipamDriver.ToString());
            return this;
        }

        /// <summary>
        /// Set IPAM driver specific options
        /// </summary>
        [ArgKey("ipam-opt")]
        public DockerNetworkCreateTask IpamOpt(string ipamOpt)
        {
            WithArgumentsKeyFromAttribute(ipamOpt.ToString());
            return this;
        }

        /// <summary>
        /// Enable IPv6 networking
        /// </summary>
        [ArgKey("ipv6")]
        public DockerNetworkCreateTask Ipv6()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Set metadata on a network
        /// </summary>
        [ArgKey("label")]
        public DockerNetworkCreateTask Label(string label)
        {
            WithArgumentsKeyFromAttribute(label.ToString());
            return this;
        }

        /// <summary>
        /// Set driver specific options
        /// </summary>
        [ArgKey("opt")]
        public DockerNetworkCreateTask Opt(string opt)
        {
            WithArgumentsKeyFromAttribute(opt.ToString());
            return this;
        }

        /// <summary>
        /// Control the network's scope
        /// </summary>
        [ArgKey("scope")]
        public DockerNetworkCreateTask Scope(string scope)
        {
            WithArgumentsKeyFromAttribute(scope.ToString());
            return this;
        }

        /// <summary>
        /// Subnet in CIDR format that represents a network segment
        /// </summary>
        [ArgKey("subnet")]
        public DockerNetworkCreateTask Subnet(string subnet)
        {
            WithArgumentsKeyFromAttribute(subnet.ToString());
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
             WithArguments(_network);

            return base.DoExecute(context);
        }

     }
}
