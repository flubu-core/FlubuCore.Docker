
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.System
{
     public partial class DockerSystemPruneTask : ExternalProcessTaskBase<int, DockerSystemPruneTask>
     {
        
        
        public DockerSystemPruneTask()
        {
            ExecutablePath = "docker";
            WithArgumentsKeyFromAttribute();

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Remove all unused images not just dangling ones
        /// </summary>
        [ArgKey("all")]
        public DockerSystemPruneTask All()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Provide filter values (e.g. 'label=<key>=<value>')
        /// </summary>
        [ArgKey("filter")]
        public DockerSystemPruneTask Filter(string filter)
        {
            WithArgumentsKeyFromAttribute(filter.ToString());
            return this;
        }

        /// <summary>
        /// Do not prompt for confirmation
        /// </summary>
        [ArgKey("force")]
        public DockerSystemPruneTask Force()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Prune volumes
        /// </summary>
        [ArgKey("volumes")]
        public DockerSystemPruneTask Volumes()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
            
            return base.DoExecute(context);
        }

     }
}
