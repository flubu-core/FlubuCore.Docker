
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context;
using FlubuCore.Tasks;
using FlubuCore.Tasks.Attributes;
using FlubuCore.Tasks.Process;

namespace FlubuCore.Tasks.Docker.Swarm
{
     public partial class DockerSwarmInitTask : ExternalProcessTaskBase<int, DockerSwarmInitTask>
     {
        
        
        public DockerSwarmInitTask()
        {
            ExecutablePath = "docker";
            WithArgumentsKeyFromAttribute();

        }

        protected override string Description { get; set; }
        
        /// <summary>
        /// Advertised address (format: <ip|interface>[:port])
        /// </summary>
        [ArgKey("advertise-addr")]
        public DockerSwarmInitTask AdvertiseAddr(string advertiseAddr)
        {
            WithArgumentsKeyFromAttribute(advertiseAddr.ToString());
            return this;
        }

        /// <summary>
        /// Enable manager autolocking (requiring an unlock key to start a stopped manager)

        /// </summary>
        [ArgKey("autolock")]
        public DockerSwarmInitTask Autolock()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Availability of the node ("active"|"pause"|"drain")
        /// </summary>
        [ArgKey("availability")]
        public DockerSwarmInitTask Availability(string availability)
        {
            WithArgumentsKeyFromAttribute(availability.ToString());
            return this;
        }

        /// <summary>
        /// Validity period for node certificates (ns|us|ms|s|m|h)
        /// </summary>
        [ArgKey("cert-expiry")]
        public DockerSwarmInitTask CertExpiry(string certExpiry)
        {
            WithArgumentsKeyFromAttribute(certExpiry.ToString());
            return this;
        }

        /// <summary>
        /// Address or interface to use for data path traffic (format: <ip|interface>)

        /// </summary>
        [ArgKey("data-path-addr")]
        public DockerSwarmInitTask DataPathAddr(string dataPathAddr)
        {
            WithArgumentsKeyFromAttribute(dataPathAddr.ToString());
            return this;
        }

        /// <summary>
        /// Port number to use for data path traffic (1024 - 49151). If no value is set or is set to 0, the default port (4789) is used.

        /// </summary>
        [ArgKey("data-path-port")]
        public DockerSwarmInitTask DataPathPort(uint dataPathPort)
        {
            WithArgumentsKeyFromAttribute(dataPathPort.ToString());
            return this;
        }

        /// <summary>
        /// default address pool in CIDR format
        /// </summary>
        [ArgKey("default-addr-pool")]
        public DockerSwarmInitTask DefaultAddrPool(string defaultAddrPool)
        {
            WithArgumentsKeyFromAttribute(defaultAddrPool.ToString());
            return this;
        }

        /// <summary>
        /// default address pool subnet mask length
        /// </summary>
        [ArgKey("default-addr-pool-mask-length")]
        public DockerSwarmInitTask DefaultAddrPoolMaskLength(uint defaultAddrPoolMaskLength)
        {
            WithArgumentsKeyFromAttribute(defaultAddrPoolMaskLength.ToString());
            return this;
        }

        /// <summary>
        /// Dispatcher heartbeat period (ns|us|ms|s|m|h)
        /// </summary>
        [ArgKey("dispatcher-heartbeat")]
        public DockerSwarmInitTask DispatcherHeartbeat(string dispatcherHeartbeat)
        {
            WithArgumentsKeyFromAttribute(dispatcherHeartbeat.ToString());
            return this;
        }

        /// <summary>
        /// Specifications of one or more certificate signing endpoints
        /// </summary>
        [ArgKey("external-ca")]
        public DockerSwarmInitTask ExternalCa(string externalCa)
        {
            WithArgumentsKeyFromAttribute(externalCa.ToString());
            return this;
        }

        /// <summary>
        /// Force create a new cluster from current state
        /// </summary>
        [ArgKey("force-new-cluster")]
        public DockerSwarmInitTask ForceNewCluster()
        {
            WithArgumentsKeyFromAttribute();
            return this;
        }

        /// <summary>
        /// Listen address (format: <ip|interface>[:port])
        /// </summary>
        [ArgKey("listen-addr")]
        public DockerSwarmInitTask ListenAddr(string listenAddr)
        {
            WithArgumentsKeyFromAttribute(listenAddr.ToString());
            return this;
        }

        /// <summary>
        /// Number of additional Raft snapshots to retain
        /// </summary>
        [ArgKey("max-snapshots")]
        public DockerSwarmInitTask MaxSnapshots(ulong maxSnapshots)
        {
            WithArgumentsKeyFromAttribute(maxSnapshots.ToString());
            return this;
        }

        /// <summary>
        /// Number of log entries between Raft snapshots
        /// </summary>
        [ArgKey("snapshot-interval")]
        public DockerSwarmInitTask SnapshotInterval(ulong snapshotInterval)
        {
            WithArgumentsKeyFromAttribute(snapshotInterval.ToString());
            return this;
        }

        /// <summary>
        /// Task history retention limit
        /// </summary>
        [ArgKey("task-history-limit")]
        public DockerSwarmInitTask TaskHistoryLimit(long taskHistoryLimit)
        {
            WithArgumentsKeyFromAttribute(taskHistoryLimit.ToString());
            return this;
        }
        protected override int DoExecute(ITaskContextInternal context)
        {
            
            return base.DoExecute(context);
        }

     }
}
