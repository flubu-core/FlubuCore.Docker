
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;

namespace FlubuCore.Infrastructure.Terminal.Commands
{
    public static class DockerCommands
    {  
        public static Dictionary<string, Type> SupportedExternalProcesses = new Dictionary<string, Type>()
    {
{ "docker attach", typeof(DockerAttachTask) },
{ "docker build", typeof(DockerBuildTask) },
{ "docker builder build", typeof(DockerBuilderBuildTask) },
{ "docker builder prune", typeof(DockerBuilderPruneTask) },
{ "docker checkpoint create", typeof(DockerCheckpointCreateTask) },
{ "docker checkpoint ls", typeof(DockerCheckpointLsTask) },
{ "docker checkpoint rm", typeof(DockerCheckpointRmTask) },
{ "docker commit", typeof(DockerCommitTask) },
{ "docker config create", typeof(DockerConfigCreateTask) },
{ "docker config inspect", typeof(DockerConfigInspectTask) },
{ "docker config ls", typeof(DockerConfigLsTask) },
{ "docker container attach", typeof(DockerContainerAttachTask) },
{ "docker container commit", typeof(DockerContainerCommitTask) },
{ "docker container create", typeof(DockerContainerCreateTask) },
{ "docker container exec", typeof(DockerContainerExecTask) },
{ "docker container export", typeof(DockerContainerExportTask) },
{ "docker container inspect", typeof(DockerContainerInspectTask) },
{ "docker container kill", typeof(DockerContainerKillTask) },
{ "docker container logs", typeof(DockerContainerLogsTask) },
{ "docker container ls", typeof(DockerContainerLsTask) },
{ "docker container prune", typeof(DockerContainerPruneTask) },
{ "docker container restart", typeof(DockerContainerRestartTask) },
{ "docker container rm", typeof(DockerContainerRmTask) },
{ "docker container run", typeof(DockerContainerRunTask) },
{ "docker container start", typeof(DockerContainerStartTask) },
{ "docker container stats", typeof(DockerContainerStatsTask) },
{ "docker container stop", typeof(DockerContainerStopTask) },
{ "docker container update", typeof(DockerContainerUpdateTask) },
{ "docker context create", typeof(DockerContextCreateTask) },
{ "docker context export", typeof(DockerContextExportTask) },
{ "docker context inspect", typeof(DockerContextInspectTask) },
{ "docker context ls", typeof(DockerContextLsTask) },
{ "docker context rm", typeof(DockerContextRmTask) },
{ "docker context update", typeof(DockerContextUpdateTask) },
{ "docker create", typeof(DockerCreateTask) },
{ "docker deploy", typeof(DockerDeployTask) },
{ "docker engine activate", typeof(DockerEngineActivateTask) },
{ "docker engine check", typeof(DockerEngineCheckTask) },
{ "docker engine update", typeof(DockerEngineUpdateTask) },
{ "docker events", typeof(DockerEventsTask) },
{ "docker exec", typeof(DockerExecTask) },
{ "docker export", typeof(DockerExportTask) },
{ "docker history", typeof(DockerHistoryTask) },
{ "docker images", typeof(DockerImagesTask) },
{ "docker image build", typeof(DockerImageBuildTask) },
{ "docker image history", typeof(DockerImageHistoryTask) },
{ "docker image import", typeof(DockerImageImportTask) },
{ "docker image inspect", typeof(DockerImageInspectTask) },
{ "docker image load", typeof(DockerImageLoadTask) },
{ "docker image ls", typeof(DockerImageLsTask) },
{ "docker image prune", typeof(DockerImagePruneTask) },
{ "docker image pull", typeof(DockerImagePullTask) },
{ "docker image push", typeof(DockerImagePushTask) },
{ "docker image rm", typeof(DockerImageRmTask) },
{ "docker image save", typeof(DockerImageSaveTask) },
{ "docker import", typeof(DockerImportTask) },
{ "docker info", typeof(DockerInfoTask) },
{ "docker inspect", typeof(DockerInspectTask) },
{ "docker kill", typeof(DockerKillTask) },
{ "docker load", typeof(DockerLoadTask) },
{ "docker login", typeof(DockerLoginTask) },
{ "docker logs", typeof(DockerLogsTask) },
{ "docker manifest annotate", typeof(DockerManifestAnnotateTask) },
{ "docker manifest create", typeof(DockerManifestCreateTask) },
{ "docker manifest inspect", typeof(DockerManifestInspectTask) },
{ "docker manifest push", typeof(DockerManifestPushTask) },
{ "docker network connect", typeof(DockerNetworkConnectTask) },
{ "docker network create", typeof(DockerNetworkCreateTask) },
{ "docker network disconnect", typeof(DockerNetworkDisconnectTask) },
{ "docker network inspect", typeof(DockerNetworkInspectTask) },
{ "docker network ls", typeof(DockerNetworkLsTask) },
{ "docker network prune", typeof(DockerNetworkPruneTask) },
{ "docker node inspect", typeof(DockerNodeInspectTask) },
{ "docker node ls", typeof(DockerNodeLsTask) },
{ "docker node ps", typeof(DockerNodePsTask) },
{ "docker node rm", typeof(DockerNodeRmTask) },
{ "docker node update", typeof(DockerNodeUpdateTask) },
{ "docker plugin create", typeof(DockerPluginCreateTask) },
{ "docker plugin disable", typeof(DockerPluginDisableTask) },
{ "docker plugin enable", typeof(DockerPluginEnableTask) },
{ "docker plugin inspect", typeof(DockerPluginInspectTask) },
{ "docker plugin install", typeof(DockerPluginInstallTask) },
{ "docker plugin ls", typeof(DockerPluginLsTask) },
{ "docker plugin push", typeof(DockerPluginPushTask) },
{ "docker plugin rm", typeof(DockerPluginRmTask) },
{ "docker plugin upgrade", typeof(DockerPluginUpgradeTask) },
{ "docker ps", typeof(DockerPsTask) },
{ "docker pull", typeof(DockerPullTask) },
{ "docker push", typeof(DockerPushTask) },
{ "docker restart", typeof(DockerRestartTask) },
{ "docker rm", typeof(DockerRmTask) },
{ "docker rmi", typeof(DockerRmiTask) },
{ "docker run", typeof(DockerRunTask) },
{ "docker save", typeof(DockerSaveTask) },
{ "docker search", typeof(DockerSearchTask) },
{ "docker secret create", typeof(DockerSecretCreateTask) },
{ "docker secret inspect", typeof(DockerSecretInspectTask) },
{ "docker secret ls", typeof(DockerSecretLsTask) },
{ "docker service create", typeof(DockerServiceCreateTask) },
{ "docker service inspect", typeof(DockerServiceInspectTask) },
{ "docker service logs", typeof(DockerServiceLogsTask) },
{ "docker service ls", typeof(DockerServiceLsTask) },
{ "docker service ps", typeof(DockerServicePsTask) },
{ "docker service rollback", typeof(DockerServiceRollbackTask) },
{ "docker service scale", typeof(DockerServiceScaleTask) },
{ "docker service update", typeof(DockerServiceUpdateTask) },
{ "docker stack", typeof(DockerStackTask) },
{ "docker stack deploy", typeof(DockerStackDeployTask) },
{ "docker stack ls", typeof(DockerStackLsTask) },
{ "docker stack ps", typeof(DockerStackPsTask) },
{ "docker stack rm", typeof(DockerStackRmTask) },
{ "docker stack services", typeof(DockerStackServicesTask) },
{ "docker start", typeof(DockerStartTask) },
{ "docker stats", typeof(DockerStatsTask) },
{ "docker stop", typeof(DockerStopTask) },
{ "docker swarm ca", typeof(DockerSwarmCaTask) },
{ "docker swarm init", typeof(DockerSwarmInitTask) },
{ "docker swarm join-token", typeof(DockerSwarmJoinTokenTask) },
{ "docker swarm join", typeof(DockerSwarmJoinTask) },
{ "docker swarm leave", typeof(DockerSwarmLeaveTask) },
{ "docker swarm unlock-key", typeof(DockerSwarmUnlockKeyTask) },
{ "docker swarm update", typeof(DockerSwarmUpdateTask) },
{ "docker system df", typeof(DockerSystemDfTask) },
{ "docker system events", typeof(DockerSystemEventsTask) },
{ "docker system info", typeof(DockerSystemInfoTask) },
{ "docker system prune", typeof(DockerSystemPruneTask) },
{ "docker trust inspect", typeof(DockerTrustInspectTask) },
{ "docker trust key generate", typeof(DockerTrustKeyGenerateTask) },
{ "docker trust key load", typeof(DockerTrustKeyLoadTask) },
{ "docker trust revoke", typeof(DockerTrustRevokeTask) },
{ "docker trust sign", typeof(DockerTrustSignTask) },
{ "docker trust signer add", typeof(DockerTrustSignerAddTask) },
{ "docker trust signer remove", typeof(DockerTrustSignerRemoveTask) },
{ "docker update", typeof(DockerUpdateTask) },
{ "docker version", typeof(DockerVersionTask) },
{ "docker volume create", typeof(DockerVolumeCreateTask) },
{ "docker volume inspect", typeof(DockerVolumeInspectTask) },
{ "docker volume ls", typeof(DockerVolumeLsTask) },
{ "docker volume prune", typeof(DockerVolumePruneTask) },
{ "docker volume rm", typeof(DockerVolumeRmTask) },
};

     
        public static KeyValuePair<string, IReadOnlyCollection<Hint>> GitCommandHints { get; } = new KeyValuePair<string, IReadOnlyCollection<Hint>>("Docker", new List<Hint>()
              {
 new Hint { Name = "attach", Help = "Attach local standard input, output, and error streams to a running container" },
 new Hint { Name = "build", Help = "Build an image from a Dockerfile" },
 new Hint { Name = "builder build", Help = "Build an image from a Dockerfile" },
 new Hint { Name = "builder prune", Help = "Remove build cache" },
 new Hint { Name = "checkpoint create", Help = "Create a checkpoint from a running container" },
 new Hint { Name = "checkpoint ls", Help = "List checkpoints for a container" },
 new Hint { Name = "checkpoint rm", Help = "Remove a checkpoint" },
 new Hint { Name = "commit", Help = "Create a new image from a container's changes" },
 new Hint { Name = "config create", Help = "Create a config from a file or STDIN" },
 new Hint { Name = "config inspect", Help = "Display detailed information on one or more configs" },
 new Hint { Name = "config ls", Help = "List configs" },
 new Hint { Name = "container attach", Help = "Attach local standard input, output, and error streams to a running container" },
 new Hint { Name = "container commit", Help = "Create a new image from a container's changes" },
 new Hint { Name = "container create", Help = "Create a new container" },
 new Hint { Name = "container exec", Help = "Run a command in a running container" },
 new Hint { Name = "container export", Help = "Export a container's filesystem as a tar archive" },
 new Hint { Name = "container inspect", Help = "Display detailed information on one or more containers" },
 new Hint { Name = "container kill", Help = "Kill one or more running containers" },
 new Hint { Name = "container logs", Help = "Fetch the logs of a container" },
 new Hint { Name = "container ls", Help = "List containers" },
 new Hint { Name = "container prune", Help = "Remove all stopped containers" },
 new Hint { Name = "container restart", Help = "Restart one or more containers" },
 new Hint { Name = "container rm", Help = "Remove one or more containers" },
 new Hint { Name = "container run", Help = "Run a command in a new container" },
 new Hint { Name = "container start", Help = "Start one or more stopped containers" },
 new Hint { Name = "container stats", Help = "Display a live stream of container(s) resource usage statistics" },
 new Hint { Name = "container stop", Help = "Stop one or more running containers" },
 new Hint { Name = "container update", Help = "Update configuration of one or more containers" },
 new Hint { Name = "context create", Help = "Create a context" },
 new Hint { Name = "context export", Help = "Export a context to a tar or kubeconfig file" },
 new Hint { Name = "context inspect", Help = "Display detailed information on one or more contexts" },
 new Hint { Name = "context ls", Help = "List contexts" },
 new Hint { Name = "context rm", Help = "Remove one or more contexts" },
 new Hint { Name = "context update", Help = "Update a context" },
 new Hint { Name = "create", Help = "Create a new container" },
 new Hint { Name = "deploy", Help = "Deploy a new stack or update an existing stack" },
 new Hint { Name = "engine activate", Help = "Activate Enterprise Edition" },
 new Hint { Name = "engine check", Help = "Check for available engine updates" },
 new Hint { Name = "engine update", Help = "Update a local engine" },
 new Hint { Name = "events", Help = "Get real time events from the server" },
 new Hint { Name = "exec", Help = "Run a command in a running container" },
 new Hint { Name = "export", Help = "Export a container's filesystem as a tar archive" },
 new Hint { Name = "history", Help = "Show the history of an image" },
 new Hint { Name = "images", Help = "List images" },
 new Hint { Name = "image build", Help = "Build an image from a Dockerfile" },
 new Hint { Name = "image history", Help = "Show the history of an image" },
 new Hint { Name = "image import", Help = "Import the contents from a tarball to create a filesystem image" },
 new Hint { Name = "image inspect", Help = "Display detailed information on one or more images" },
 new Hint { Name = "image load", Help = "Load an image from a tar archive or STDIN" },
 new Hint { Name = "image ls", Help = "List images" },
 new Hint { Name = "image prune", Help = "Remove unused images" },
 new Hint { Name = "image pull", Help = "Pull an image or a repository from a registry" },
 new Hint { Name = "image push", Help = "Push an image or a repository to a registry" },
 new Hint { Name = "image rm", Help = "Remove one or more images" },
 new Hint { Name = "image save", Help = "Save one or more images to a tar archive (streamed to STDOUT by default)" },
 new Hint { Name = "import", Help = "Import the contents from a tarball to create a filesystem image" },
 new Hint { Name = "info", Help = "Display system-wide information" },
 new Hint { Name = "inspect", Help = "Return low-level information on Docker objects" },
 new Hint { Name = "kill", Help = "Kill one or more running containers" },
 new Hint { Name = "load", Help = "Load an image from a tar archive or STDIN" },
 new Hint { Name = "login", Help = "Log in to a Docker registry" },
 new Hint { Name = "logs", Help = "Fetch the logs of a container" },
 new Hint { Name = "manifest annotate", Help = "Add additional information to a local image manifest" },
 new Hint { Name = "manifest create", Help = "Create a local manifest list for annotating and pushing to a registry" },
 new Hint { Name = "manifest inspect", Help = "Display an image manifest, or manifest list" },
 new Hint { Name = "manifest push", Help = "Push a manifest list to a repository" },
 new Hint { Name = "network connect", Help = "Connect a container to a network" },
 new Hint { Name = "network create", Help = "Create a network" },
 new Hint { Name = "network disconnect", Help = "Disconnect a container from a network" },
 new Hint { Name = "network inspect", Help = "Display detailed information on one or more networks" },
 new Hint { Name = "network ls", Help = "List networks" },
 new Hint { Name = "network prune", Help = "Remove all unused networks" },
 new Hint { Name = "node inspect", Help = "Display detailed information on one or more nodes" },
 new Hint { Name = "node ls", Help = "List nodes in the swarm" },
 new Hint { Name = "node ps", Help = "List tasks running on one or more nodes, defaults to current node" },
 new Hint { Name = "node rm", Help = "Remove one or more nodes from the swarm" },
 new Hint { Name = "node update", Help = "Update a node" },
 new Hint { Name = "plugin create", Help = "Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory." },
 new Hint { Name = "plugin disable", Help = "Disable a plugin" },
 new Hint { Name = "plugin enable", Help = "Enable a plugin" },
 new Hint { Name = "plugin inspect", Help = "Display detailed information on one or more plugins" },
 new Hint { Name = "plugin install", Help = "Install a plugin" },
 new Hint { Name = "plugin ls", Help = "List plugins" },
 new Hint { Name = "plugin push", Help = "Push a plugin to a registry" },
 new Hint { Name = "plugin rm", Help = "Remove one or more plugins" },
 new Hint { Name = "plugin upgrade", Help = "Upgrade an existing plugin" },
 new Hint { Name = "ps", Help = "List containers" },
 new Hint { Name = "pull", Help = "Pull an image or a repository from a registry" },
 new Hint { Name = "push", Help = "Push an image or a repository to a registry" },
 new Hint { Name = "restart", Help = "Restart one or more containers" },
 new Hint { Name = "rm", Help = "Remove one or more containers" },
 new Hint { Name = "rmi", Help = "Remove one or more images" },
 new Hint { Name = "run", Help = "Run a command in a new container" },
 new Hint { Name = "save", Help = "Save one or more images to a tar archive (streamed to STDOUT by default)" },
 new Hint { Name = "search", Help = "Search the Docker Hub for images" },
 new Hint { Name = "secret create", Help = "Create a secret from a file or STDIN as content" },
 new Hint { Name = "secret inspect", Help = "Display detailed information on one or more secrets" },
 new Hint { Name = "secret ls", Help = "List secrets" },
 new Hint { Name = "service create", Help = "Create a new service" },
 new Hint { Name = "service inspect", Help = "Display detailed information on one or more services" },
 new Hint { Name = "service logs", Help = "Fetch the logs of a service or task" },
 new Hint { Name = "service ls", Help = "List services" },
 new Hint { Name = "service ps", Help = "List the tasks of one or more services" },
 new Hint { Name = "service rollback", Help = "Revert changes to a service's configuration" },
 new Hint { Name = "service scale", Help = "Scale one or multiple replicated services" },
 new Hint { Name = "service update", Help = "Update a service" },
 new Hint { Name = "stack", Help = "Manage Docker stacks" },
 new Hint { Name = "stack deploy", Help = "Deploy a new stack or update an existing stack" },
 new Hint { Name = "stack ls", Help = "List stacks" },
 new Hint { Name = "stack ps", Help = "List the tasks in the stack" },
 new Hint { Name = "stack rm", Help = "Remove one or more stacks" },
 new Hint { Name = "stack services", Help = "List the services in the stack" },
 new Hint { Name = "start", Help = "Start one or more stopped containers" },
 new Hint { Name = "stats", Help = "Display a live stream of container(s) resource usage statistics" },
 new Hint { Name = "stop", Help = "Stop one or more running containers" },
 new Hint { Name = "swarm ca", Help = "Display and rotate the root CA" },
 new Hint { Name = "swarm init", Help = "Initialize a swarm" },
 new Hint { Name = "swarm join-token", Help = "Manage join tokens" },
 new Hint { Name = "swarm join", Help = "Join a swarm as a node and/or manager" },
 new Hint { Name = "swarm leave", Help = "Leave the swarm" },
 new Hint { Name = "swarm unlock-key", Help = "Manage the unlock key" },
 new Hint { Name = "swarm update", Help = "Update the swarm" },
 new Hint { Name = "system df", Help = "Show docker disk usage" },
 new Hint { Name = "system events", Help = "Get real time events from the server" },
 new Hint { Name = "system info", Help = "Display system-wide information" },
 new Hint { Name = "system prune", Help = "Remove unused data" },
 new Hint { Name = "trust inspect", Help = "Return low-level information about keys and signatures" },
 new Hint { Name = "trust key generate", Help = "Generate and load a signing key-pair" },
 new Hint { Name = "trust key load", Help = "Load a private key file for signing" },
 new Hint { Name = "trust revoke", Help = "Remove trust for an image" },
 new Hint { Name = "trust sign", Help = "Sign an image" },
 new Hint { Name = "trust signer add", Help = "Add a signer" },
 new Hint { Name = "trust signer remove", Help = "Remove a signer" },
 new Hint { Name = "update", Help = "Update configuration of one or more containers" },
 new Hint { Name = "version", Help = "Show the Docker version information" },
 new Hint { Name = "volume create", Help = "Create a volume" },
 new Hint { Name = "volume inspect", Help = "Display detailed information on one or more volumes" },
 new Hint { Name = "volume ls", Help = "List volumes" },
 new Hint { Name = "volume prune", Help = "Remove all unused local volumes" },
 new Hint { Name = "volume rm", Help = "Remove one or more volumes" },
});
    }
}

