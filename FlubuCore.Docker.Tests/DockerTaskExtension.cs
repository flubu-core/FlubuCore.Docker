
//-----------------------------------------------------------------------
// <auto-generated />
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using FlubuCore.Context.FluentInterface.Docker;
using FlubuCore.Tasks.Docker;

namespace FlubuCore.Context.FluentInterface
{
    public class DockerTaskExtension
    {  
        public Builder Builder ()
        {
            return new Builder();
        }
        public Checkpoint Checkpoint ()
        {
            return new Checkpoint();
        }
        public Config Config ()
        {
            return new Config();
        }
        public Container Container ()
        {
            return new Container();
        }
        public Docker.Context Context ()
        {
            return new Docker.Context();
        }
        public Engine Engine ()
        {
            return new Engine();
        }
        public Image Image ()
        {
            return new Image();
        }
        public Manifest Manifest ()
        {
            return new Manifest();
        }
        public Network Network ()
        {
            return new Network();
        }
        public Node Node ()
        {
            return new Node();
        }
        public Plugin Plugin ()
        {
            return new Plugin();
        }
        public Secret Secret ()
        {
            return new Secret();
        }
        public Service Service ()
        {
            return new Service();
        }
        public Stack Stack ()
        {
            return new Stack();
        }
        public Swarm Swarm ()
        {
            return new Swarm();
        }
        public Docker.System System ()
        {
            return new Docker.System();
        }
        public Trust Trust ()
        {
            return new Trust();
        }
        public Volume Volume ()
        {
            return new Volume();
        }
        
            public DockerAttachTask Attach(string container)
            {
                return new DockerAttachTask(container);
            }

            public DockerBuildTask Build(string pathOrURL)
            {
                return new DockerBuildTask(pathOrURL);
            }

            public DockerCommitTask Commit(string container ,  string repository)
            {
                return new DockerCommitTask(container,  repository);
            }

            public DockerCreateTask Create(string image ,  string command ,  params string[] arg)
            {
                return new DockerCreateTask(image,  command,  arg);
            }

            public DockerDeployTask Deploy(string stack)
            {
                return new DockerDeployTask(stack);
            }

            public DockerEventsTask Events()
            {
                return new DockerEventsTask();
            }

            public DockerExecTask Exec(string container ,  string command ,  params string[] arg)
            {
                return new DockerExecTask(container,  command,  arg);
            }

            public DockerExportTask Export(string container)
            {
                return new DockerExportTask(container);
            }

            public DockerHistoryTask History(string image)
            {
                return new DockerHistoryTask(image);
            }

            public DockerImagesTask Images(string repository)
            {
                return new DockerImagesTask(repository);
            }

            public DockerImportTask Import(string file ,  string repository)
            {
                return new DockerImportTask(file,  repository);
            }

            public DockerInfoTask Info()
            {
                return new DockerInfoTask();
            }

            public DockerInspectTask Inspect(params string[] name)
            {
                return new DockerInspectTask(name);
            }

            public DockerKillTask Kill(params string[] container)
            {
                return new DockerKillTask(container);
            }

            public DockerLoadTask Load()
            {
                return new DockerLoadTask();
            }

            public DockerLoginTask Login(string server)
            {
                return new DockerLoginTask(server);
            }

            public DockerLogsTask Logs(string container)
            {
                return new DockerLogsTask(container);
            }

            public DockerPsTask Ps()
            {
                return new DockerPsTask();
            }

            public DockerPullTask Pull(string name)
            {
                return new DockerPullTask(name);
            }

            public DockerPushTask Push(string name)
            {
                return new DockerPushTask(name);
            }

            public DockerRestartTask Restart(params string[] container)
            {
                return new DockerRestartTask(container);
            }

            public DockerRmTask Rm(params string[] container)
            {
                return new DockerRmTask(container);
            }

            public DockerRmiTask Rmi(params string[] image)
            {
                return new DockerRmiTask(image);
            }

            public DockerRunTask Run(string image ,  string command ,  params string[] arg)
            {
                return new DockerRunTask(image,  command,  arg);
            }

            public DockerSaveTask Save(params string[] image)
            {
                return new DockerSaveTask(image);
            }

            public DockerSearchTask Search(string term)
            {
                return new DockerSearchTask(term);
            }

            public DockerStartTask Start(params string[] container)
            {
                return new DockerStartTask(container);
            }

            public DockerStatsTask Stats(params string[] container)
            {
                return new DockerStatsTask(container);
            }

            public DockerStopTask Stop(params string[] container)
            {
                return new DockerStopTask(container);
            }

            public DockerUpdateTask Update(params string[] container)
            {
                return new DockerUpdateTask(container);
            }

            public DockerVersionTask Version()
            {
                return new DockerVersionTask();
            }
        
    }
}

